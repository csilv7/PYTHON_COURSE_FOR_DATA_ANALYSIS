# Exercicíos

## 1. **Aulas Faltadas:** {.unnumbered}

Davinir não gosta de ir às aulas, mas ele precisa comparecer a pelo menos 75% delas. Sabendo que há duas aulas por semana durante quatro meses, ajude Davinir a calcular:

-   

    a)  Quantas aulas ele pode faltar.

-   

    b)  Quantas aulas ele deve assistir para não ser reprovado.

> **Nota:** Um mês tem quatro semanas.

## 2. **Área de um Círculo:** {.unnumbered}

Calcule a área de um círculo de raio `R = 2`. Crie uma função chamada `calcula_area` que receba o valor do raio e retorne a área.

-   

    a)  Teste a função com diferentes valores de raio, como `3.5` e `7`.

> **Lembrete:** a área de um círculo é dada por:\
> $$A = \pi R^{2}$$

## 3. **Conversão de Tempo:** {.unnumbered}

Escreva uma função chamada `converte_tempo` que converta uma quantidade de tempo dada em horas, minutos e segundos para apenas segundos. Teste a função com os seguintes valores:

-   

    a)  3 horas, 23 minutos e 17 segundos.

-   

    b)  2 horas, 45 minutos e 50 segundos.

-   

    c)  0 horas, 30 minutos e 15 segundos.

## 4. **Expressão Matemática:** {.unnumbered}

Resolva as expressões abaixo usando o Python:

-   

    a)  $$\dfrac{100 − 413 \cdot (20 − 5 \times 4)}{5}$$

-   

    b)  $$\dfrac{ \left[(3^{4} + \sqrt{144})(100 - 95,5) \right] + 6 }{-80 + 2^{4}}$$

-   

    c)  $$3,9 \cdot 10^{-2} + 5,2 \cdot 10^{-3}$$

## 5. **Média Ponderada:** {.unnumbered}

Escreva um script para calcular a média ponderada de 4 notas. Considere pesos 0.1, 0.2, 0.3 e 0.4 para cada avaliação. Use variáveis e `print()` para exibir o resultado.

-   

    a)  Modifique o script para permitir a entrada das notas e dos pesos pelo usuário.

-   

    b)  Garanta que os pesos somem 1.0; caso contrário, exiba uma mensagem de erro.

## 6. **Divisão de Contas:** {.unnumbered}

Você e seus amigos foram ao supermercado e compraram:

-   75 latas de cerveja: R\$ 2,20 cada (da ruim ainda, pra fazer o dinheiro render);
-   2 pacotes de macarrão: R\$ 8,73 cada;
-   1 pacote de molho de tomate: R\$ 3,45;
-   420g de cebola: R\$ 5,40/kg;
-   250g de alho: R\$ 30/kg;
-   450g de pães franceses: R\$ 25/kg;

Calcule: - a) O valor total da compra. - b) Quanto cada um deve pagar, considerando que são 4 pessoas. - c) O valor da compra se houvesse um desconto de 5% nas latas de cerveja.

## 7. **Investimento:** {.unnumbered}

Suponha que você tenha R\$ 100,00 para investir, com um retorno de 10% ao ano. Após 7 anos, quanto dinheiro você terá?

-   

    a)  Implemente uma função que calcule esse valor para qualquer número de anos e taxa de retorno.

-   

    b)  Simule o investimento para retornos de 5%, 10% e 15% ao ano.

## 8. **Conversão de Moeda:** {.unnumbered}

Com a cotação do dólar a R\$ 3,25, quanto você teria ao cambiar R\$ 65,00? Escreva um script que permita ao usuário inserir o valor em reais e a cotação para calcular o valor em dólares.

## 9. **Média Aritmética, Geométrica e Harmônica:** {.unnumbered}

Abelindo precisa decidir como calcular a média final de Rondinelly, que obteve as seguintes notas: `8.66`, `5.35`, `5` e `1`.

-   

    a)  Calcule a média aritmética (M.A.), geométrica (M.G.) e harmônica (M.H.) dessas notas.

-   

    b)  Qual dessas médias dá a maior nota para Rondinelly?

> Média Aritimética: $$MA = \dfrac{\sum_{i = 1}^{n} x_{i}}{n}$$ Média Geométrica: $$MG = \sqrt[n]{\Pi_{i = 1}^{n} x_{i}}$$ Média Harmônica: $$MH =  \dfrac{n}{\sum_{i = 1}^{n} \frac{1}{x_{i}}}$$

## 10. **Compras Internacionais:** {.unnumbered}

Josefson deseja comprar na China um celular de USD 299,99, uma chaleira de USD 23,87, um gnomo de jardim de USD 66,66 e 6 adesivos de unicórnio de USD 1,42 cada. O frete para Rolândia, no Paraná, é de USD 12,34.

-   

    a)  Calcule o valor total da compra em dólares.

-   

    b)  Usando o valor do dólar do exercício anterior, calcule o preço final em reais.

-   

    c)  Calcule quanto Josefson pagou apenas de IOF (6,38%).

## 11. **Manipulação de Strings:** {.unnumbered}

Dada a frase "**Python é muito legal**", use fatiamento para:

-   

    a)  Criar uma variável contendo cada palavra.

-   

    b)  Calcular o tamanho da frase e de cada palavra.

-   

    c)  Use slicing para inverter a string "Python".

## 12. **Listas e Listas Aninhadas:** {.unnumbered}

-   Crie três listas:
    -   

        a)  Frutas

    -   

        b)  Docinhos de festa (inclua brigadeiros)

    -   

        c)  Ingredientes de feijoada
-   Crie uma lista de listas chamada `listona` e execute os seguintes passos:
    -   

        d)  Acesse o elemento "brigadeiro".

    -   

        e)  Adicione mais brigadeiros à lista de docinhos de festa. O que aconteceu com a lista original?

    -   

        f)  Adicione bebidas ao final da `listona`, sem criar uma nova lista.

## 13. **Manipulação de Listas:** {.unnumbered}

Usando a `listona` do exercício anterior:

-   

    a)  Remova todos os elementos usando `del` até que a lista fique vazia.

-   

    b)  Verifique se a lista está vazia usando uma estrutura de controle.

## 14. **Dicionários:** {.unnumbered}

-   

    a)  Crie um dicionário com as 5 pessoas mais próximas de você, usando o nome como chave e a cor da camisa como valor.

-   

    b)  Crie um dicionário `semana = {}` e complete-o com os dias da semana como chave e uma lista de aulas como valor.

-   

    c)  Crie um dicionário `filmes = {}` com 5 filmes como chave e, como valor, outro dicionário contendo vilão e ano de lançamento.

## 15. **Doação de Sangue:** {.unnumbered}

Crie um programa que verifique se uma pessoa pode doar sangue com base nos critérios:

-   

    a)  Ter entre 16 e 69 anos.

-   

    b)  Pesar mais de 50 kg.

-   

    c)  Ter dormido pelo menos 6 horas nas últimas 24 horas.

## 16. **Equação do Segundo Grau:** {.unnumbered}

Crie uma função que receba os coeficientes `a`, `b` e `c` de uma equação do segundo grau e determine se a equação possui duas raízes reais, uma, ou nenhuma.

-   

    a)  Calcule e imprima as raízes, se existirem.

## 17. **Média com Conceito:** {.unnumbered}

Melhore o código de cálculo da média ponderada do Exercício 5 de um(a) aluno(a), incluindo um conceito final com base na média:

-   

    a)  9.00 - 10.00: Excelente

-   

    b)  7.00 - 8.99: Bom

-   

    c)  5.00 - 6.99: Regular

-   

    d)  0.00 - 4.99: Insuficiente

## 18. **Estatísticas de Grupo:** {.unnumbered}

Leia do teclado a idade e o sexo de 10 pessoas e calcule:

-   

    a)  Idade média das mulheres.

-   

    b)  Idade média dos homens.

-   

    c)  Idade média do grupo.

## 19. **Somatório:** {.unnumbered}

Calcule e imprima o somatório dos números de 1 a 100.

## 20. **Sequência de Fibonacci:** {.unnumbered}

Escreva um código que gere a sequência de Fibonacci $n$ termos definido pelo usuário.

Lembrando que: $$F_{n} = \begin{cases}
0 \ , \text{ se } n = 1 \\
1 \ , \text{ se } n = 2 \\
F_{n - 2} + F_{n - 1} \ , \text{ para os demais casos}
\end{cases}$$

## 21. **Fatorial:** {.unnumbered}

Desenvolva uma função que retorne o valor do fatorial de um número inteiro fornecido pelo usuário.

## 22. **Listas:** {.unnumbered}

Crie uma lista contendo o quadrado de todos os números ímpares entre 1 e 20.

## 21. **Lista de Tuplas:** {.unnumbered}

Crie uma lista de tuplas onde cada tupla contenha o número e seu cubo, para números de 1 a 10. Exemplo: `[(1, 1), (2, 8), (3, 27), ...]`

## EXTRA. **Sistema de Controle de Estoque e Vendas de uma Loja** {.unnumbered}

Uma loja de conveniência deseja criar um sistema simples para gerenciar o estoque e calcular o valor total das vendas diárias. O sistema deve ser capaz de:

1.  **Cadastrar Produtos**: Permitir a inserção de novos produtos no estoque. Cada produto deve ter as seguintes informações:

    -   Nome do produto (string)
    -   Preço unitário (float)
    -   Quantidade em estoque (inteiro)

2.  **Atualizar Estoque**: Aumentar ou diminuir a quantidade de um produto específico.

3.  **Realizar Venda**:

    -   Perguntar ao usuário quais produtos ele deseja comprar e a quantidade de cada um.
    -   Verificar se a quantidade em estoque é suficiente para a venda.
    -   Caso seja suficiente, atualizar o estoque e calcular o valor total da venda.
    -   Caso contrário, exibir uma mensagem informando que a quantidade em estoque é insuficiente.

4.  **Relatório de Vendas**: Ao final do dia, o sistema deve gerar um relatório contendo:

    -   Produtos vendidos e quantidade vendida de cada um.
    -   Valor total arrecadado.

**Desafio Extra**:

-   Implemente uma função que calcule um desconto progressivo para as vendas:
    -   5% para compras acima de R\$ 100,00.
    -   10% para compras acima de R\$ 200,00.
    -   15% para compras acima de R\$ 500,00.
-   Adicione a opção de reabastecimento automático: se a quantidade de um produto no estoque estiver abaixo de um determinado valor, reabasteça automaticamente para a quantidade inicial.

> **Dicas:**

> -   Use um dicionário para armazenar os produtos e suas informações.
> -   Crie funções para cada uma das funcionalidades do sistema (cadastrar produtos, atualizar estoque, realizar venda, gerar relatório).
> -   Utilize loops e condições para controlar o fluxo do programa.

## EXTRA. **Sistema de Cadastro de Alunos e Notas** {.unnumbered}

Crie um programa para gerenciar o cadastro de alunos e suas notas em uma escola. O programa deve:

1.  **Cadastrar Alunos**:

    -   O usuário deve ser capaz de cadastrar novos alunos, informando o nome e uma lista de notas (mínimo de 3 e máximo de 5 notas).

2.  **Consultar Alunos**:

    -   O usuário deve ser capaz de consultar um aluno específico e visualizar suas notas e média.

3.  **Calcular Média e Conceito**:

    -   A média deve ser calculada e um conceito deve ser atribuído ao aluno de acordo com a média:
        -   A: Média ≥ 9.0
        -   B: 7.0 ≤ Média \< 9.0
        -   C: 5.0 ≤ Média \< 7.0
        -   D: 3.0 ≤ Média \< 5.0
        -   E: Média \< 3.0

4.  **Alterar Notas**:

    -   O usuário deve ser capaz de alterar as notas de um aluno específico.

5.  **Gerar Relatório Geral**:

    -   Exibir um relatório contendo todos os alunos, suas médias e seus conceitos.

6.  **Desafios Extras**:

    -   Calcular a média da turma e o número de alunos em cada conceito.
    -   Encontrar o aluno com a maior média e o aluno com a menor média.

> **Dicas:**

> -   Utilize dicionários para armazenar as informações dos alunos e suas notas.
> -   Crie funções para cada uma das funcionalidades do sistema (cadastrar aluno, consultar aluno, calcular média, alterar notas, gerar relatório).
> -   Use loops e estruturas de controle para gerenciar as operações.
> -   Explore a manipulação de strings para melhorar a visualização dos dados no relatório.

# Exercícios gerados pelo Copilot

Aqui está a lista completa de exercícios para o capítulo **Fundamentos de Python**! 🎯  

### **Lista de Exercícios: Controle de Fluxo e Estruturas de Dados em Python**  

---

### **1. Condicionais (`if`, `elif`, `else`)**  

📌 **Exercício 1:** Escreva um programa que peça ao usuário para inserir sua idade e, com base nisso, exiba uma mensagem indicando se ele é menor de idade, adulto ou idoso.  

📌 **Exercício 2:** Modifique o código anterior para verificar se a idade é válida (maior que zero) antes de continuar a execução.  

📌 **Exercício 3:** Crie um programa que solicite ao usuário uma nota (de 0 a 10) e exiba sua classificação:  
- **Nota ≥ 9:** "Excelente"  
- **Nota ≥ 7:** "Bom"  
- **Nota ≥ 5:** "Regular"  
- **Nota < 5:** "Reprovado"  

---

### **2. Estruturas de Repetição (`for`, `while`)**  

📌 **Exercício 4:** Escreva um programa que imprima todos os números de **1 a 50** usando um loop `for`.  

📌 **Exercício 5:** Crie um programa que solicite um número e utilize um loop `while` para contar regressivamente até 0.  

📌 **Exercício 6:** Gere uma lista de **10 números aleatórios** entre 1 e 100 e exiba apenas os números pares.  

---

### **3. Manipulação de Strings**  

📌 **Exercício 7:** Peça ao usuário para digitar uma frase e exiba:  
- O número total de caracteres  
- A frase em **maiúsculas** e **minúsculas**  
- A frase invertida  

📌 **Exercício 8:** Crie um programa que verifique se uma palavra digitada pelo usuário é um **palíndromo** (ou seja, pode ser lida da mesma forma de trás para frente).  

---

### **4. Listas e Seus Métodos**  

📌 **Exercício 9:** Crie uma lista de **5 frutas** e permita que o usuário adicione **mais uma fruta**. Em seguida, exiba a lista ordenada em ordem alfabética.  

📌 **Exercício 10:** Crie uma lista com **10 números aleatórios** e exiba:  
- O maior e o menor número  
- A média dos valores  
- Os números organizados em ordem crescente  

---

### **5. Dicionários**  

📌 **Exercício 11:** Crie um dicionário com **3 países** e suas capitais. Permita que o usuário adicione mais um país e exiba o dicionário atualizado.  

📌 **Exercício 12:** Faça um programa que armazene dados de alunos em um dicionário. Cada aluno deve ter **nome, idade e nota final**. Após armazenar **3 alunos**, exiba a média das notas.  

---

### **6. Funções**  

📌 **Exercício 13:** Crie uma função que receba **dois números** como parâmetros e retorne a soma deles.  

📌 **Exercício 14:** Crie uma função que receba uma lista de números e retorne apenas os valores **ímpares**.  

📌 **Exercício 15:** Desenvolva uma função para converter **graus Celsius** em **Fahrenheit**.  

📌 **Exercício 16:** Faça uma função que receba um número inteiro e retorne **True** se for primo e **False** caso contrário.  

---

📢 **Desafio Final:** Escreva um programa que simule um sistema de **cadastro de usuários**. Permita que o usuário registre nome, idade e e-mail em um dicionário e, ao final, exiba os dados cadastrados de forma organizada.  

🔥 **Agora é hora de testar seus conhecimentos!** 🚀  

# Exercícios gerados pelo ChatGPT

Excelente, Breno. Você finalizou com êxito um dos capítulos mais centrais do Python básico: **Controle de Fluxo**. A cobertura foi ampla, com ótima progressão de dificuldade e riqueza textual. A seguir, preparei uma **lista de exercícios completa**, dividida em três níveis: **iniciante**, **intermediário** e **avançado**.

---

# 📝 Lista de Exercícios: Controle de Fluxo em Python

## 🎯 Objetivo

Testar e reforçar os conhecimentos adquiridos nos tópicos:

* Estruturas de decisão (`if`, `elif`, `else`)
* Estruturas de repetição (`for`, `while`)
* Comandos de controle (`break`, `continue`, `pass`)
* Tratamento de exceções (`try`, `except`, `finally`)
* Funções (com ou sem parâmetros, com retorno, `lambda`, escopo)

---

## ✅ Exercícios para Iniciantes

1. **Par ou ímpar?**
   Peça um número inteiro ao usuário e informe se ele é par ou ímpar. (Use estrutura condicional)

2. **Maioridade eleitoral**
   Crie uma função que receba a idade de uma pessoa e retorne se ela pode votar (idade ≥ 16).

3. **Tabuada personalizada**
   Escreva uma função que recebe um número inteiro e imprime sua tabuada de 1 a 10.

4. **Contador com `while`**
   Use um `while` para contar de 1 até 10. Imprima os números na tela.

5. **Média simples**
   Crie uma função que recebe uma lista de notas e retorna a média aritmética.

6. **Saudação personalizada**
   Crie uma função com parâmetro `nome` e um valor padrão `"usuário"` que imprime uma saudação.

---

## ⚙️ Exercícios Intermediários

7. **Categorizador de nota**
   Receba uma nota de 0 a 10 e classifique:

   * \[0, 5): "Insuficiente"
   * \[5, 7): "Regular"
   * \[7, 9): "Bom"
   * [9, 10]: "Excelente"

8. **Soma de pares**
   Crie uma função que receba uma lista de inteiros e retorne a soma apenas dos pares.

9. **Busca em dicionário**
   Crie um dicionário com nomes de pessoas e suas idades. Peça ao usuário um nome e informe a idade correspondente (use `get()`).

10. **Contagem reversa com `for`**
    Implemente uma contagem regressiva de 10 até 1 usando `for`.

11. **Divisão segura**
    Escreva uma função que recebe dois números e retorna o resultado da divisão. Trate os erros de entrada e divisão por zero com `try/except`.

12. **Função `lambda` + `map()`**
    Dada uma lista de números, use `map()` com `lambda` para retornar seus quadrados.

---

## 🚀 Exercícios Avançados

13. **Calculadora personalizada**
    Crie uma função `calculadora(a, b, operador)` que execute operações básicas (+, -, \*, /) com tratamento de exceções.

14. **Função que conta palavras únicas**
    Escreva uma função que recebe uma string e retorna a quantidade de palavras distintas.

15. **Normalização de dados**
    Implemente uma função que recebe uma lista numérica e retorna uma nova lista com os dados normalizados (mínimo = 0, máximo = 1).

16. **Detector de números primos**
    Crie uma função que verifica se um número inteiro é primo. Retorne `True` ou `False`.

17. **Jogo de adivinhação (sem `input()`)**
    Simule um jogo de adivinhação entre dois números definidos no código. O programa deve informar se o palpite está alto ou baixo até acertar (use `while`, `break` e comparação).

18. **Contador de vogais e consoantes**
    Crie uma função que recebe uma string e retorna a quantidade de vogais e consoantes.

19. **Função que retorna múltiplos resultados**
    Crie uma função que recebe uma lista de números e retorna:

    * A média
    * O maior valor
    * O menor valor
    * A quantidade de elementos

---

## ✨ Desafio Final (Extra)

20. **Mini sistema de cadastro**
    Implemente um mini sistema que permita:

    * Cadastrar pessoas (nome e idade)
    * Armazenar os dados em um dicionário
    * Permitir busca por nome
    * Mostrar todos os cadastros
    * Encerrar com a opção "sair"

> Use funções, laços, condicionais e tratamento de erros.

---

# Exercícios gerados pelo DeepSeek

Aqui está uma lista de exercícios variados e desafiadores para praticar os conceitos de Python abordados no capítulo, desde problemas básicos até desafios mais complexos:

---

### **Exercícios Básicos**  
1. **String Reversa**  
   Escreva uma função que receba uma string e retorne-a invertida.  
   *Exemplo:* `"Python"` → `"nohtyP"`

2. **Contador de Palavras**  
   Crie um programa que conte quantas vezes cada palavra aparece em uma frase. Ignore maiúsculas/minúsculas e pontuação.  
   *Exemplo:* `"Oi, oi, Python!"` → `{"oi": 2, "python": 1}`

3. **Lista de Quadrados**  
   Gere uma lista com os quadrados dos números de 1 a 10 usando list comprehension.  
   *Saída:* `[1, 4, 9, ..., 100]`

4. **Dicionário de Contatos**  
   Crie um dicionário vazio e adicione três contatos (nome: telefone). Depois, remova um contato e altere o telefone de outro.

---

### **Exercícios Intermediários**  
5. **Filtro de Números Pares**  
   Dada uma lista de números, retorne uma nova lista apenas com os pares. Use `filter()` ou list comprehension.  
   *Exemplo:* `[1, 2, 3, 4]` → `[2, 4]`

6. **Mesclagem de Dicionários**  
   Escreva uma função que combine dois dicionários. Se uma chave existir em ambos, some os valores.  
   *Exemplo:* `{"a": 1, "b": 2}` + `{"b": 3, "c": 4}` → `{"a": 1, "b": 5, "c": 4}`

7. **Palíndromo**  
   Verifique se uma string é um palíndromo (lê-se igual de trás para frente). Ignore espaços e pontuação.  
   *Exemplo:* `"Ame o poema!"` → `True`

8. **Lista Aninhada**  
   Dada uma lista de listas (ex: `[[1, 2], [3, 4]]`), retorne uma lista plana (ex: `[1, 2, 3, 4]`). Use recursão se possível.

---

### **Desafios Avançados**  
9. **Cifra de César**  
   Implemente uma cifra de César que desloque cada letra de uma string por 3 posições no alfabeto. Mantenha maiúsculas/minúsculas.  
   *Exemplo:* `"Python"` → `"Sbwkrq"`

10. **Agenda Telefônica com Busca**  
    Crie uma agenda que permita:  
    - Adicionar/remover contatos.  
    - Buscar contatos por nome (parcial ou completo, case-insensitive).  
    - Salvar e carregar os dados em um arquivo `.txt`.

11. **Análise de Texto**  
    Dado um texto longo, calcule:  
    - A palavra mais frequente.  
    - O comprimento médio das palavras.  
    - A letra que mais aparece.  
    *Dica:* Use `collections.Counter`.

12. **Jogo da Forca**  
    Implemente o jogo da forca:  
    - Escolha uma palavra aleatória de uma lista.  
    - Mostre traços correspondentes às letras.  
    - Permita palpites até 6 erros ou vitória.  
    *Extra:* Adicione dicas baseadas no tema (ex: "frutas").

---

### **Bônus (Para os Corajosos)**  
13. **Compressão de Strings**  
    Escreva uma função que compacte sequências repetidas de caracteres.  
    *Exemplo:* `"aaabbbcca"` → `"a3b3c2a1"`.

14. **Quadrado Mágico**  
    Verifique se uma matriz 3x3 (lista de listas) é um quadrado mágico (somas de linhas, colunas e diagonais iguais).

15. **Simulador de Banco**  
    Crie um sistema bancário com classes para `Conta` (saldo, depósito, saque) e `Cliente` (nome, CPF). Use dicionários para armazenar os dados.

---

### **Dicas Gerais**  
- Use f-strings para formatação.  
- Explore métodos como `split()`, `join()`, `get()`, e `setdefault()`.  
- Para desafios, considere tratar edge cases (ex: listas vazias, divisão por zero).  

Esses exercícios cobrem desde manipulação básica de strings e listas até projetos mais estruturais. Eles podem ser adaptados para diferentes níveis de dificuldade. Boa prática! 🚀

# Exercícios gerados pelo Gemini

Current action thought: The user wants me to create a list of exercises covering the main concepts of a Python basic chapter, with varying difficulty levels. The provided document, "AUX.txt"[cite: 1], seems relevant as it covers basic Python objects like strings, lists, and dictionaries. I will analyze this document to create the exercise list.

Final response to user: Claro, aqui está uma lista de exercícios que aborda os principais conceitos de Python básico, com diferentes níveis de dificuldade:

### Exercícios de Python Básico

#### Nível Iniciante

1.  **Manipulação de Strings:**
    * Crie uma variável chamada `mensagem` com a string "Python é divertido!".
    * Imprima o comprimento da string. [cite: 14]
    * Imprima o primeiro e o último caractere da string.
    * Crie uma nova string que contenha apenas a palavra "Python" da string original. [cite: 21]
    * Converta a string para letras minúsculas e imprima o resultado. [cite: 37]

2.  **Operações com Listas:**
    * Crie uma lista chamada `frutas` com os seguintes elementos: "maçã", "banana", "abacaxi". [cite: 45]
    * Adicione a fruta "laranja" ao final da lista. [cite: 57]
    * Remova a fruta "banana" da lista.
    * Imprima o segundo elemento da lista. [cite: 46]
    * Crie uma nova lista que contenha apenas os dois primeiros elementos da lista `frutas`.

3.  **Trabalhando com Dicionários:**
    * Crie um dicionário chamado `pessoa` com as chaves "nome", "idade" e "cidade". Atribua valores a essas chaves.
    * Imprima o valor associado à chave "nome".
    * Adicione uma nova chave "profissão" ao dicionário `pessoa` e atribua um valor.
    * Altere o valor da chave "idade" para um novo valor.
    * Verifique se a chave "email" existe no dicionário.

#### Nível Intermediário

4.  **Fatiamento de Strings:**
    * Dada a string `frase = "A programação em Python é diferenciada!"`[cite: 21], use fatiamento para extrair as seguintes partes:
        * "A programação" [cite: 21]
        * "Python é legal" (use a variável `palavra` que contém "Python") [cite: 21]
        * A frase completa de trás para frente. [cite: 21]

5.  **Manipulação Avançada de Listas:**
    * Crie duas listas, `lista1` e `lista2`, com alguns elementos em comum.
    * Crie uma nova lista que contenha apenas os elementos que estão presentes em ambas as listas.
    * Crie uma lista que contenha todos os elementos de `lista1` seguidos por todos os elementos de `lista2`. [cite: 62]
    * Ordene a `lista1` em ordem crescente e decrescente. [cite: 58]

6.  **Dicionários e Listas:**
    * Crie um dicionário onde as chaves são nomes de produtos e os valores são listas de preços em diferentes lojas.
    * Escreva uma função que recebe o dicionário e o nome de um produto, e retorna o menor preço encontrado para esse produto.
    * Adicione um novo produto ao dicionário com sua lista de preços.

#### Nível Avançado

7.  **Desafio de Strings:**
    * Escreva uma função que recebe uma string e retorna `True` se a string for um palíndromo (lê-se da mesma forma de trás para frente), e `False` caso contrário.
    * Escreva uma função que conta o número de ocorrências de cada palavra em uma frase.

8.  **Listas e Aleatoriedade:**
    * Use o módulo `random` para gerar uma lista de 100 números aleatórios entre 0 e 1. [cite: 50]
    * Encontre o maior e o menor número na lista.
    * Calcule a média dos números na lista.
    * Crie uma nova lista que contenha apenas os números únicos da lista original (remova duplicatas).

9.  **Dicionários Aninhados:**
    * Crie um dicionário que represente uma estrutura de árvore genealógica. As chaves devem ser nomes de pessoas, e os valores podem ser outros dicionários (representando os filhos) ou listas (representando os pais).
    * Escreva uma função que recebe o dicionário e o nome de uma pessoa, e retorna todos os ancestrais dessa pessoa.
    * Escreva uma função que recebe o dicionário e retorna o número total de pessoas na árvore genealógica.

Lembre-se que estes são apenas exemplos, você pode adaptá-los ou criar novos exercícios com base no seu capítulo. O importante é garantir que os alunos pratiquem e solidifiquem os conhecimentos adquiridos.