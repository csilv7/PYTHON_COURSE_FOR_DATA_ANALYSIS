## Funções

Uma função é uma sequência de instruções que executa uma operação específica de computação. Ao definir uma função, você especifica um nome e a sequência de instruções que serão executadas quando a função for chamada pelo nome.

A ideia é semelhante às funções matemáticas, mas, em linguagens de programação, as funções não se restringem a realizar apenas cálculos. Elas podem realizar uma ampla variedade de tarefas, como manipulação de dados, operações de entrada e saída, entre outras.

Em Python, funções são blocos de código reutilizáveis que ajudam a organizar e modularizar um programa. Elas recebem dados de entrada, chamados de argumentos, aplicam uma sequência de operações sobre esses dados e, opcionalmente, retornam um resultado, conhecido como valor de retorno. Essa relação é análoga à definição de função na matemática, onde cada elemento de um conjunto (domínio) é associado a um único elemento de outro conjunto (imagem).

Vimos o `type()`, um exemplo de função:

```         
[Input]  : type(23)
[Output] : int
```

```         
[Input]  : type('textinho')
[Output] : str
```

Defini-se função de forma que:

```         
[Input]  : def NOME_DA_FUNÇÃO(parâmetro_1, parâmetro_2, ..., parâmetro_n):
               <1º comando>
               <2º comando>
               ...
               <n-ésimo comando>

               print(var_1, var_2, ..., var_n) ou retun var_1, var_2, ..., var_n
```

> **Nota:** Assim como nas estruturas de decisão e loops, as funções em Python é necessário utilizar os dois pontos (:) seguidos de uma indentação para indicar que um bloco de código pertence a essas estruturas.

Veja exemplos:

```{python}
def soma():
  print(1 + 1)
```

```{python}
soma()
```

```{python}
def soma():
  return 1 + 1
```

```{python}
soma()
```

Qual a diferença entre utilizar `print()` e `return` aqui em cima?!?

```{python}
# Definindo a função `soma`
def soma():
  print(1 + 1)

# Executando a função
soma()
```

```{python}
# Atribuindo o resultado de `soma` a uma variável `a`
a = soma()

# Chamando o valor de `a`
a # Note que a = 2, porém
```

```{python}
# Definindo a função `soma`
def soma():
  return 1 + 1

# Executando a função
soma()
```

```{python}
# Atribuindo o resultado de `soma` a uma variável `b`
b = soma()

# Chamando o valor de `b`
b
```

Tal diferênça surge porque a função `print()` é usado somente para imprimir as informações/resultados na tela. Com isso, não é possível atribuir uma impressão à uma variável.

Por isso, quando desejarmos guardar (atribuir) os valores resultantes de uma função devemos usar `return`.

### Funções com Argumentos

Queremos multiplicar um número qualquer, $x$, por $2$ e somar com $3$, assim, a função em Python pode ser escrita dessa forma:

```{python}
def linear(x):
  return 2 * x + 3
```

```{python}
linear(1)
```

```{python}
linear(2)
```

Como posso calcular a tabuada de um número onde tal número é o dado de entrada? Veja:

```{python}
def tabuada_num(num):
  for n in range(1, 11):
    print(f'{num} x {n} = {num * n}')
```

```{python}
tabuada_num(7)
```

```{python}
tabuada_num(13)
```

```{python}
tabuada_num(1.5)
```

# Exercicíos

## 1. **Aulas Faltadas:** {.unnumbered}

Davinir não gosta de ir às aulas, mas ele precisa comparecer a pelo menos 75% delas. Sabendo que há duas aulas por semana durante quatro meses, ajude Davinir a calcular:

-   

    a)  Quantas aulas ele pode faltar.

-   

    b)  Quantas aulas ele deve assistir para não ser reprovado.

> **Nota:** Um mês tem quatro semanas.

## 2. **Área de um Círculo:** {.unnumbered}

Calcule a área de um círculo de raio `R = 2`. Crie uma função chamada `calcula_area` que receba o valor do raio e retorne a área.

-   

    a)  Teste a função com diferentes valores de raio, como `3.5` e `7`.

> **Lembrete:** a área de um círculo é dada por:\
> $$A = \pi R^{2}$$

## 3. **Conversão de Tempo:** {.unnumbered}

Escreva uma função chamada `converte_tempo` que converta uma quantidade de tempo dada em horas, minutos e segundos para apenas segundos. Teste a função com os seguintes valores:

-   

    a)  3 horas, 23 minutos e 17 segundos.

-   

    b)  2 horas, 45 minutos e 50 segundos.

-   

    c)  0 horas, 30 minutos e 15 segundos.

## 4. **Expressão Matemática:** {.unnumbered}

Resolva as expressões abaixo usando o Python:

-   

    a)  $$\dfrac{100 − 413 \cdot (20 − 5 \times 4)}{5}$$

-   

    b)  $$\dfrac{ \left[(3^{4} + \sqrt{144})(100 - 95,5) \right] + 6 }{-80 + 2^{4}}$$

-   

    c)  $$3,9 \cdot 10^{-2} + 5,2 \cdot 10^{-3}$$

## 5. **Média Ponderada:** {.unnumbered}

Escreva um script para calcular a média ponderada de 4 notas. Considere pesos 0.1, 0.2, 0.3 e 0.4 para cada avaliação. Use variáveis e `print()` para exibir o resultado.

-   

    a)  Modifique o script para permitir a entrada das notas e dos pesos pelo usuário.

-   

    b)  Garanta que os pesos somem 1.0; caso contrário, exiba uma mensagem de erro.

## 6. **Divisão de Contas:** {.unnumbered}

Você e seus amigos foram ao supermercado e compraram:

-   75 latas de cerveja: R\$ 2,20 cada (da ruim ainda, pra fazer o dinheiro render);
-   2 pacotes de macarrão: R\$ 8,73 cada;
-   1 pacote de molho de tomate: R\$ 3,45;
-   420g de cebola: R\$ 5,40/kg;
-   250g de alho: R\$ 30/kg;
-   450g de pães franceses: R\$ 25/kg;

Calcule: - a) O valor total da compra. - b) Quanto cada um deve pagar, considerando que são 4 pessoas. - c) O valor da compra se houvesse um desconto de 5% nas latas de cerveja.

## 7. **Investimento:** {.unnumbered}

Suponha que você tenha R\$ 100,00 para investir, com um retorno de 10% ao ano. Após 7 anos, quanto dinheiro você terá?

-   

    a)  Implemente uma função que calcule esse valor para qualquer número de anos e taxa de retorno.

-   

    b)  Simule o investimento para retornos de 5%, 10% e 15% ao ano.

## 8. **Conversão de Moeda:** {.unnumbered}

Com a cotação do dólar a R\$ 3,25, quanto você teria ao cambiar R\$ 65,00? Escreva um script que permita ao usuário inserir o valor em reais e a cotação para calcular o valor em dólares.

## 9. **Média Aritmética, Geométrica e Harmônica:** {.unnumbered}

Abelindo precisa decidir como calcular a média final de Rondinelly, que obteve as seguintes notas: `8.66`, `5.35`, `5` e `1`.

-   

    a)  Calcule a média aritmética (M.A.), geométrica (M.G.) e harmônica (M.H.) dessas notas.

-   

    b)  Qual dessas médias dá a maior nota para Rondinelly?

> Média Aritimética: $$MA = \dfrac{\sum_{i = 1}^{n} x_{i}}{n}$$ Média Geométrica: $$MG = \sqrt[n]{\Pi_{i = 1}^{n} x_{i}}$$ Média Harmônica: $$MH =  \dfrac{n}{\sum_{i = 1}^{n} \frac{1}{x_{i}}}$$

## 10. **Compras Internacionais:** {.unnumbered}

Josefson deseja comprar na China um celular de USD 299,99, uma chaleira de USD 23,87, um gnomo de jardim de USD 66,66 e 6 adesivos de unicórnio de USD 1,42 cada. O frete para Rolândia, no Paraná, é de USD 12,34.

-   

    a)  Calcule o valor total da compra em dólares.

-   

    b)  Usando o valor do dólar do exercício anterior, calcule o preço final em reais.

-   

    c)  Calcule quanto Josefson pagou apenas de IOF (6,38%).

## 11. **Manipulação de Strings:** {.unnumbered}

Dada a frase "**Python é muito legal**", use fatiamento para:

-   

    a)  Criar uma variável contendo cada palavra.

-   

    b)  Calcular o tamanho da frase e de cada palavra.

-   

    c)  Use slicing para inverter a string "Python".

## 12. **Listas e Listas Aninhadas:** {.unnumbered}

-   Crie três listas:
    -   

        a)  Frutas

    -   

        b)  Docinhos de festa (inclua brigadeiros)

    -   

        c)  Ingredientes de feijoada
-   Crie uma lista de listas chamada `listona` e execute os seguintes passos:
    -   

        d)  Acesse o elemento "brigadeiro".

    -   

        e)  Adicione mais brigadeiros à lista de docinhos de festa. O que aconteceu com a lista original?

    -   

        f)  Adicione bebidas ao final da `listona`, sem criar uma nova lista.

## 13. **Manipulação de Listas:** {.unnumbered}

Usando a `listona` do exercício anterior:

-   

    a)  Remova todos os elementos usando `del` até que a lista fique vazia.

-   

    b)  Verifique se a lista está vazia usando uma estrutura de controle.

## 14. **Dicionários:** {.unnumbered}

-   

    a)  Crie um dicionário com as 5 pessoas mais próximas de você, usando o nome como chave e a cor da camisa como valor.

-   

    b)  Crie um dicionário `semana = {}` e complete-o com os dias da semana como chave e uma lista de aulas como valor.

-   

    c)  Crie um dicionário `filmes = {}` com 5 filmes como chave e, como valor, outro dicionário contendo vilão e ano de lançamento.

## 15. **Doação de Sangue:** {.unnumbered}

Crie um programa que verifique se uma pessoa pode doar sangue com base nos critérios:

-   

    a)  Ter entre 16 e 69 anos.

-   

    b)  Pesar mais de 50 kg.

-   

    c)  Ter dormido pelo menos 6 horas nas últimas 24 horas.

## 16. **Equação do Segundo Grau:** {.unnumbered}

Crie uma função que receba os coeficientes `a`, `b` e `c` de uma equação do segundo grau e determine se a equação possui duas raízes reais, uma, ou nenhuma.

-   

    a)  Calcule e imprima as raízes, se existirem.

## 17. **Média com Conceito:** {.unnumbered}

Melhore o código de cálculo da média ponderada do Exercício 5 de um(a) aluno(a), incluindo um conceito final com base na média:

-   

    a)  9.00 - 10.00: Excelente

-   

    b)  7.00 - 8.99: Bom

-   

    c)  5.00 - 6.99: Regular

-   

    d)  0.00 - 4.99: Insuficiente

## 18. **Estatísticas de Grupo:** {.unnumbered}

Leia do teclado a idade e o sexo de 10 pessoas e calcule:

-   

    a)  Idade média das mulheres.

-   

    b)  Idade média dos homens.

-   

    c)  Idade média do grupo.

## 19. **Somatório:** {.unnumbered}

Calcule e imprima o somatório dos números de 1 a 100.

## 20. **Sequência de Fibonacci:** {.unnumbered}

Escreva um código que gere a sequência de Fibonacci $n$ termos definido pelo usuário.

Lembrando que: $$F_{n} = \begin{cases}
0 \ , \text{ se } n = 1 \\
1 \ , \text{ se } n = 2 \\
F_{n - 2} + F_{n - 1} \ , \text{ para os demais casos}
\end{cases}$$

## 21. **Fatorial:** {.unnumbered}

Desenvolva uma função que retorne o valor do fatorial de um número inteiro fornecido pelo usuário.

## 22. **Listas:** {.unnumbered}

Crie uma lista contendo o quadrado de todos os números ímpares entre 1 e 20.

## 21. **Lista de Tuplas:** {.unnumbered}

Crie uma lista de tuplas onde cada tupla contenha o número e seu cubo, para números de 1 a 10. Exemplo: `[(1, 1), (2, 8), (3, 27), ...]`

## EXTRA. **Sistema de Controle de Estoque e Vendas de uma Loja** {.unnumbered}

Uma loja de conveniência deseja criar um sistema simples para gerenciar o estoque e calcular o valor total das vendas diárias. O sistema deve ser capaz de:

1.  **Cadastrar Produtos**: Permitir a inserção de novos produtos no estoque. Cada produto deve ter as seguintes informações:

    -   Nome do produto (string)
    -   Preço unitário (float)
    -   Quantidade em estoque (inteiro)

2.  **Atualizar Estoque**: Aumentar ou diminuir a quantidade de um produto específico.

3.  **Realizar Venda**:

    -   Perguntar ao usuário quais produtos ele deseja comprar e a quantidade de cada um.
    -   Verificar se a quantidade em estoque é suficiente para a venda.
    -   Caso seja suficiente, atualizar o estoque e calcular o valor total da venda.
    -   Caso contrário, exibir uma mensagem informando que a quantidade em estoque é insuficiente.

4.  **Relatório de Vendas**: Ao final do dia, o sistema deve gerar um relatório contendo:

    -   Produtos vendidos e quantidade vendida de cada um.
    -   Valor total arrecadado.

**Desafio Extra**:

-   Implemente uma função que calcule um desconto progressivo para as vendas:
    -   5% para compras acima de R\$ 100,00.
    -   10% para compras acima de R\$ 200,00.
    -   15% para compras acima de R\$ 500,00.
-   Adicione a opção de reabastecimento automático: se a quantidade de um produto no estoque estiver abaixo de um determinado valor, reabasteça automaticamente para a quantidade inicial.

> **Dicas:**

> -   Use um dicionário para armazenar os produtos e suas informações.
> -   Crie funções para cada uma das funcionalidades do sistema (cadastrar produtos, atualizar estoque, realizar venda, gerar relatório).
> -   Utilize loops e condições para controlar o fluxo do programa.

## EXTRA. **Sistema de Cadastro de Alunos e Notas** {.unnumbered}

Crie um programa para gerenciar o cadastro de alunos e suas notas em uma escola. O programa deve:

1.  **Cadastrar Alunos**:

    -   O usuário deve ser capaz de cadastrar novos alunos, informando o nome e uma lista de notas (mínimo de 3 e máximo de 5 notas).

2.  **Consultar Alunos**:

    -   O usuário deve ser capaz de consultar um aluno específico e visualizar suas notas e média.

3.  **Calcular Média e Conceito**:

    -   A média deve ser calculada e um conceito deve ser atribuído ao aluno de acordo com a média:
        -   A: Média ≥ 9.0
        -   B: 7.0 ≤ Média \< 9.0
        -   C: 5.0 ≤ Média \< 7.0
        -   D: 3.0 ≤ Média \< 5.0
        -   E: Média \< 3.0

4.  **Alterar Notas**:

    -   O usuário deve ser capaz de alterar as notas de um aluno específico.

5.  **Gerar Relatório Geral**:

    -   Exibir um relatório contendo todos os alunos, suas médias e seus conceitos.

6.  **Desafios Extras**:

    -   Calcular a média da turma e o número de alunos em cada conceito.
    -   Encontrar o aluno com a maior média e o aluno com a menor média.

> **Dicas:**

> -   Utilize dicionários para armazenar as informações dos alunos e suas notas.
> -   Crie funções para cada uma das funcionalidades do sistema (cadastrar aluno, consultar aluno, calcular média, alterar notas, gerar relatório).
> -   Use loops e estruturas de controle para gerenciar as operações.
> -   Explore a manipulação de strings para melhorar a visualização dos dados no relatório.