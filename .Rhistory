elif (mean >= 7) and (mean < 9):
print("O conceito do aluno foi BOM")
elif (mean >= 9) and (mean <= 10):
print("O conceito do aluno foi EXCELENTE")
else:
print("Média de Avaliações Inválida")
print(f"Média das Avaliações: {round(mean, 2)}")
# Em qual conceito está média estaria?
if 0 <= mean < 5:
print("O conceito do aluno foi INSUFICIENTE")
elif 5 <= mean < 7:
print("O conceito do aluno foi REGULAR")
elif 7 <= mean < 9:
print("O conceito do aluno foi BOM")
elif 9 <= mean < 10:
print("O conceito do aluno foi EXCELENTE")
else:
print("Média de Avaliações Inválida")
# Dados do usuário
age = 19
CNH = True
# Verificação com Expressão Ternária
result = "Está apto a dirigir!" if age >= 18 and CNH != False else "Não está apto a dirigir!"
# Visualizar
print(result)
# Definindo números
x, y = 4, 5
# Verificação com Expressão Ternária
maior_valor = x if x > y else y
# Visualizar
print(maior_valor)
# Lembra do objeto range()?
range(3)
list(range(3))
for i in range(3):
print(i)
print(f"Lista exemplo para iteração: {list(range(3))}")
print("Iniciando contagem:")
for contador in list(range(3)):
print(f"Passo {contador + 1}: Valor atual = {contador}")
print("Contagem concluída!")
texto = "Curso de Python para Análise de Dados."
for caractere in texto:
print(caractere)
# Lista de frutas
frutas = ["maçã", "banana", "laranja", "abacaxi", "uva"]
# Imprimindo cada fruta em caixa alta
for fruta in frutas:
print(fruta.upper())
# Criando a lista de números de 0 a 5
numbers = list(range(6))
# Iterando sobre a lista
for number in numbers:
print(f"Número: {number}")
print(f"Número ao quadrado: {number ** 2}")
print(f"Número ao cubo: {number ** 3}\n")
# Dicionário com traduções da palavra "gato"
translations = {"Português": "gato", "Inglês": "cat", "Francês": "chat"}
# Percorrendo as chaves e os valores
for idioma, palavra in translations.items():
print(f"{idioma} -> {palavra}")
# Outra forma de iterar: combinando as chaves e os valores com zip()
for idioma, palavra in zip(translations.keys(), translations.values()):
print(f"{idioma} -> {palavra}")
# Dicionário com informações de pessoas
dados = {
"Nome": ["Igor", "Allan", "Victória", "Izabella", "Fernando"],
"Idade": [39, 17, 98, 45, 27],
"Animal de Estimação": ["Gato", "Tigre", "Arara", "Javali", "Ratatouille"]
}
# Percorrendo os dados
for i, key in enumerate(dados.keys()):
if i == 0:
print("Informações Coletadas:")
for id in dados[key]:
if id == dados[key][0]:
print(f"   {i + 1}. {key}:")
print(f"      {id}")
else:
print(f"      {id}")
# Forma tradicional
quadrados = []
for num in range(1, 11):
quadrados.append(num ** 2)
# Visualizar
print(quadrados)
# Forma com list comprehension
quadrados = [num ** 2 for num in range(1, 11)]
# Visualizar
print(quadrados)
# Forma tradiconal
pares = []
for num in range(1, 21):
if num % 2 == 0:
pares.append(num)
# Visualizar
print(pares)
# Forma com list comprehension
pares = [num for num in range(1, 21) if num % 2 == 0]
# Visualizar
print(pares)
# Forma tradiconal
multiplos = []
for num in range(100):
if num % 2 == 0 and num % 5 == 0:
multiplos.append(num)
# Visualizar
print(multiplos)
# Forma com list comprehension
multiplos = [num for num in range(100) if num % 2 == 0 and num % 5 == 0]
# Visualizar
print(multiplos)
# Forma tradiconal
multiplos = []
for num in range(100):
if num % 2 == 0 and num % 5 == 0 and num % 6 == 0:
multiplos.append(num)
# Visualizar
print(multiplos)
# Forma com list comprehension
multiplos = [num for num in range(100) if num % 2 == 0 and num % 5 == 0 and num % 6 == 0]
# Visualizar
print(multiplos)
# Forma tradiconal
multiplos = []
for num in range(100):
if num % 2 == 0 and num % 5 == 0 or num % 6 == 0:
multiplos.append(num)
# Visualizar
print(multiplos)
# Forma com list comprehension
multiplos = [num for num in range(100) if num % 2 == 0 and num % 5 == 0 or num % 6 == 0]
# Visualizar
print(multiplos)
# Forma tradiconal
sucess_number_div_5 = []
for number in range(26):
if number % 5 == 0:
sucess_number_div_5.append("sucess")
else:
sucess_number_div_5.append("failure")
# Visualizar
print(sucess_number_div_5)
# Forma com list comprehension
sucess_number_div_5 = ["sucess" if number % 5 == 0 else "failure" for number in range(26)]
# Visualizar
print(sucess_number_div_5)
matrix = [
[1, 2, 3, 4],
[5, 6, 7, 8],
[9, 10, 11, 12]
]
print(matrix)
# Forma tradiconal
transposta = []
for column in range(len(matrix[0])):
row = []
for element in matrix:
row.append(element[column])
transposta.append(row)
# Visualizar
print(transposta)
# Forma com list comprehension
transposta = [[element[column] for element in matrix] for column in range(len(matrix[0]))]
# Visualizar
print(transposta)
contador = 1
while contador <= 5:
print(f"Contador: {contador}")
contador += 1
n = 1
while n <= 10:
if n % 2 == 0:
print(f"{n} é par")
n += 1
palavra = "Python"
reverso = ""
i = len(palavra) - 1
while i >= 0:
reverso += palavra[i]
i -= 1
print(f"A palavra '{palavra}' invertida é '{reverso}'.")
numeros = [10, 20, 30, 40, 50]
soma = 0
while numeros:
valor = numeros.pop()  # Remove o último elemento
soma += valor
print(f"Soma dos valores: {soma}")
dados, i = [12, -3, 5, 0, -8, 19, -1, 0, 7], 0
positivos, negativos, zeros = 0, 0, 0
while i < len(dados):
if dados[i] > 0:
positivos += 1
elif dados[i] < 0:
negativos += 1
else:
zeros += 1
i += 1
print(f"Positivos: {positivos}, Negativos: {negativos}, Zeros: {zeros}")
# Encontra o primeiro número divisível por 7
for num in range(1, 10):
if num % 7 == 0:
print(f"Encontrado: {num}")
break
print(num)
# Não irá imprimir o número 7
for num in range(1, 10):
if num == 7:
continue
print(num)
produtos = ["camiseta", "caneca", None, "poster", "", "adesivo"]
for item in produtos:
if not item:  # None ou string vazia
continue
print(f"Processando: {item.upper()}")
def greeting1():
print("Olá. Sejá bem-vindo ao Curso de Python para Análise de Dados!")
def greeting2(nome):
print(f"Olá, {nome}. Sejá bem-vindo ao Curso de Python para Análise de Dados!")
greeting1()
greeting2("Breno")
def saudar(nome, sobrenome):
print(f"Olá, {nome} {sobrenome}!")
saudar("Maria", "Silva") # Saída: Olá, Maria Silva!
saudar("Silva", "Maria") # Saída: Olá, Silva Maria!
def email(nome, dominio="icen.ufpa.br"):
return f"{nome.lower()}@{dominio}"
print(email(nome="joao"))                            # Saída: joao@icen.ufpa.br
print(email(dominio="ufpa.br", nome="ANA")) # Saída: ana@ufpa.br
def calcular_potencia(base, expoente=2): # expoente tem valor padrão 2
return base ** expoente
print(calcular_potencia(3))    # Saída: 9 (3^2)
print(calcular_potencia(2, 4)) # Saída: 16 (2^4)
def soma_tudo(*numeros):
total = 0
for num in numeros:
total += num
return total
print(soma_tudo(1, 2, 3))        # Saída: 6
print(soma_tudo(10, 20, 30, 40)) # Saída: 100
def exibir_perfil(**info):
for chave, valor in info.items():
print(f"{chave.replace("_", " ").title()}: {valor}")
exibir_perfil(nome="Carlos", idade=30, cidade="São Paulo")
# Saída:
# Nome: Carlos
# Idade: 30
# Cidade: São Paulo
exibir_perfil(nome_cliente="Carlos", idade_cliente=30, cidade_cliente="São Paulo")
# Saída:
# Nome Cliente: Carlos
# Idade Cliente: 30
# Cidade Cliente: São Paulo
gret
greeting2("Emilly Rose")
grr = greeting2("Emilly Rose")
grr
grr == None
print(x)  # Erro! 'x' só existe dentro da função.
View(y)
View(x)
del x
def minha_funcao():
x = 10  # Variável local
print(x)
minha_funcao()
print(x)  # Erro! 'x' só existe dentro da função.
def minha_funcao():
arr = 10  # Variável local
print(arr)
minha_funcao()
try:
print(arr)  # Erro! 'arr' só existe dentro da função.
except NamrError:
print("Variável 'arr' não definida!")
try:
# Código que pode gerar erros
numero = 0
resultado = 10 / numero
print("Resultado:", resultado)
except ZeroDivisionError:
# Executado se ocorrer o erro específico
print("Erro: Divisão por zero!")
except Exception as e:
# Captura qualquer outro erro
print(f"Erro inesperado: {e}")
else:
# Executado se NENHUM erro ocorrer
print("Operação bem-sucedida!")
finally:
# Sempre executado (com ou sem erros)
print("Fim do bloco try-except")
try:
print(arr)  # Erro! 'arr' só existe dentro da função.
except NameError:
print("Variável 'arr' não definida!")
def my_function_sum1(a, b):
summ = a + b
return summ
def my_function_sum2(a, b):
return a + b
a = my_function_sum1(1/2, 1/2)
b = my_function_sum2(1/2, 1/2)
print(a == b)
my_function_sum([1, 2, 3], 5, 10, 20, 32)
def my_function_sum(*numbers):
summ = 0
for num in numbers:
summ += num
return
my_function_sum([1, 2, 3], 5, 10, 20, 32)
def my_function_sum(*numbers):
summ = 0
for num in numbers:
if type == list:
for n in num:
summ += n
summ += num
return
my_function_sum([1, 2, 3], 5, 10, 20, 32)
def my_function_sum(*numbers):
summ = 0
for num in numbers:
if type(num) == list:
for n in num:
summ += n
summ += num
return
my_function_sum([1, 2, 3], 5, 10, 20, 32)
l = [1, 2, 3]
type(l)
l = [1, 2, 3]
type(l) == list
def my_function_sum(*numbers):
summ = 0
for num in numbers:
if type(num) == list:
for n in num:
summ += n
summ += num
return
my_function_sum(5, 10, 20, 32)
def my_function_sum(*numbers):
summ = 0
for num in numbers:
if type(num) == list:
for n in num:
summ += n
summ += num
return summ
my_function_sum(5, 10, 20, 32)
def my_function_sum(*numbers):
summ = 0
for num in numbers:
if type(num) == list:
for n in num:
summ += n
summ += num
return summ
my_function_sum([1, 2, 3], 5, 10, 20, 32)
def my_function_sum(*numbers):
summ = 0
for num in numbers:
if type(num) == list:
for n in num:
summ += n
else:
summ += num
return summ
my_function_sum([1, 2, 3], 5, 10, 20, 32)
def my_function_sum(*numbers):
summ = 0
for num in numbers:
if type(num) == list:
for n in num:
if (type(n) != int) or (type(n) != float):
continue
summ += n
else:
summ += num
return summ
my_function_sum([1, 2, "a", 3], 5, 10, 20, 32)
def my_function_sum(*numbers):
summ = 0
for num in numbers:
if type(num) == list:
for n in num:
if (type(n) != int) or (type(n) != float):
continue
summ += n
else:
summ += num
return summ
my_function_sum([1, 2, "a", 3], 5, 10, 20, 32)
def my_function_sum(*numbers):
summ = 0
for num in numbers:
if type(num) == list:
for n in num:
if (type(n) != int) or (type(n) != float):
continue
summ += n
else:
summ += num
return summ
my_function_sum([1, 2, 3], 5, 10, 20, 32)
def my_function_sum(*numbers):
summ = 0
for num in numbers:
if type(num) == list:
for n in num:
if (type(n) != int) or (type(n) != float):
continue
summ += n
else:
summ += num
return summ
my_function_sum([1, 2, "a", 3], 5, 10, 20, 32)
# Guardando soma
summ = my_function_sum([1, 2, "a", 3], 5, 10, 20, 32)
# Visualizando
print(summ)
# Verificando
print(summ == None) # A saída deve ser: False
# Definindo função anônima
square = lambda x: x ** 2
# Fazendo uso da função
square(2)
# Definindo função anônima
square = lambda x: x ** 2
# Fazendo uso da função
print(square(2))
# Definindo função anônima
linear = lambda x, y: 2 * x + y
# Fazendo uso da função
print(linear(2, 3))
# Exemplo de uso com sorted()
list_of_numbers = [1, 5, 2, 8, 3]
# Ordenar lista
print(sorted(list_of_numbers, key = lambda x: 2 * x))
# Exemplo de uso com sorted()
list_of_numbers = [1, 5, 2, 8, 3]
# Ordenar lista
print(sorted(list_of_numbers, key = lambda x: 1 / x ** 2))
list_of_numbers = [1, 5, 9, 0.1, 2, 8, 3]
# Exemplo de uso com sorted()
print(sorted(list_of_numbers, key = lambda x: 1 / x ** 2))
# Exemplo de uso com o filter()
list_of_numbers = [2.5, 1, 5, 9, 0.1, 2, 8, 3]
# Exemplo de uso com sorted()
print(sorted(list_of_numbers, key = lambda x: 1 / x ** 2))
# Exemplo de uso com o filter()
list_of_numbers = [2.5, 1, 5, 9, 0.1, 2, 8, 3, 12]
# Exemplo de uso com sorted()
print(sorted(list_of_numbers, key = lambda x: 1 / x ** 2))
# Exemplo de uso com o filter()
list_of_numbers = [2.5, 1, 5, 9, 0.1, 2, 8, 3, 12]
# Exemplo de uso com sorted()
print(sorted(list_of_numbers, key = lambda x: 1 / x ** 2))
# Exemplo de uso com o filter()
print(filter(lambda x: x % 2 == 0, list_of_numbers))
list_of_numbers = [2.5, 1, 5, 9, 0.1, 2, 8, 3, 12]
# Exemplo de uso com sorted()
print(sorted(list_of_numbers, key = lambda x: 1 / x ** 2))
# Exemplo de uso com o filter()
print(list(filter(lambda x: x % 2 == 0, list_of_numbers)))
list_of_numbers = [2.5, 1, 5, 9, 0.1, 2, 8, 3, 12]
# Exemplo de uso com sorted()
print(sorted(list_of_numbers, key = lambda x: 1 / x ** 2))
# Exemplo de uso com filter()
print(list(filter(lambda x: x % 2 == 0, list_of_numbers)))
# Exemplo de um com map()
print(list(map(lambda x: x * 2, , list_of_numbers)))
list_of_numbers = [2.5, 1, 5, 9, 0.1, 2, 8, 3, 12]
# Exemplo de uso com sorted()
print(sorted(list_of_numbers, key = lambda x: 1 / x ** 2))
# Exemplo de uso com filter()
print(list(filter(lambda x: x % 2 == 0, list_of_numbers)))
# Exemplo de um com map()
print(list(map(lambda x: x * 2, list_of_numbers)))
tt = lambda x: x * 2
tt(list_of_numbers)
# Definindo função anônima
square = lambda x: x ** 2
# Fazendo uso da função
print(square(2))
# Definindo função anônima
linear = lambda x, y: 2 * x + y
# Fazendo uso da função
print(linear(2, 3))
# Definindo função anônima
tt = lambda x: x * 2 + x
# Fazendo uso da função
print(tt(list_of_numbers))
global av
global vars
global
# Definindo função anônima
square = lambda x: x ** 2
# Fazendo uso da função
print(square(2))
# Definindo função anônima
linear = lambda x, y: 2 * x + y
# Fazendo uso da função
print(linear(2, 3))
# Definindo função anônima
tt = lambda x: x * 2 + x
# Fazendo uso da função
print(tt([1, 2, 3]))
1+1
2^(sqrt(1.5))
install.packages("learnr")
