```{r include=FALSE, echo=FALSE}
library(reticulate)
use_python("C:/Users/user/anaconda3/python.exe", required = TRUE)
```

```{=html}
<style>
  body{text-align: justify}
</style>
```

:::: progress
:::: {.progress-bar style="width: 100%;"}
::::
::::

# Controle de Fluxo

---

## Introdução

Em programação, o **controle de fluxo** determina a ordem em que as instruções são executadas em um programa. Em Python, isso permite criar programas que tomam decisões e repetem ações com base em condições específicas, tornando seu código mais dinâmico e adaptável.

**Neste capítulo, exploraremos as principais estruturas de controle de fluxo:**

* **Condicionais (`if`, `elif`, `else`)**: Permitem executar blocos de código diferentes dependendo se uma condição é verdadeira ou falsa.
* **Laços (`for`, `while`)**: Permitem repetir um bloco de código várias vezes, seja por um número específico de vezes ou enquanto uma condição for verdadeira.
* **Tratamento de exceções (`try`, `except`, `finally`)**: Permitem lidar com erros e situações inesperadas sem interromper o programa.
* **Palavras-chave (`break`, `continue`, `pass`)**: Permitem controlar o fluxo de execução dentro de laços.

**Por que o controle de fluxo é importante?**

Imagine um programa que:

* Decide se um usuário tem acesso a um sistema (`if`).
* Repete uma ação até que um download seja concluído (`while`).
* Percorre uma lista de produtos para calcular descontos (`for`).
* Previne erros se um arquivo não for encontrado (`try/except`).

Sem controle de fluxo, nossos programas seriam lineares e limitados. Com ele, ganhamos **flexibilidade** e **poder** para resolver problemas complexos.

Dominar o controle de fluxo é essencial para qualquer pessoa que esteja aprendendo programação, pois ele está presente em praticamente todo código real. Vamos começar a explorar cada conceito com exemplos práticos e exercícios!

---

## Estruturas de Decisão

As estruturas de decisão em Python são usadas para controlar o **fluxo do programa**, ou seja, para **decidir qual bloco de código será executado** dependendo de uma ou mais condições. Pense como um semáforo: dependendo da cor, uma ação diferente deve ser tomada — o mesmo acontece em um programa.

- Exemplo do mundo real:

```
Se estiver nublado:
    Levarei guarda-chuva
Senão:
    Não levarei
```

> **Nota: Em Python, a indentação (recuo de quatro espaços ou um tab) é obrigatória para definir os blocos de código. Isso significa que o que estiver indentado será considerado parte da condição.**

---

### Estrutura `if` e `else`

Vamos começar com o básico: `if` (se) e `else` (senão).

```{python}
a = 7

if a > 3:
    print("A variável 'a' é maior que 3")
else:
    print("A variável 'a' é menor ou igual a 3")
```

---

### Estrutura `if`, `elif` e `else`

Se quisermos testar mais de uma condição, usamos o `elif` (abreviação de `else if`). Assim, podemos checar várias possibilidades antes de cair no `else`.

```{python}
valor = 3

if valor == 1:
    print("Valor é 1")
elif valor == 2:
    print("Valor é 2")
elif valor == 3:
    print("Valor é 3")
else:
    print("Valor não corresponde a nenhuma das opções anteriores")
```

> **O Python executa apenas o primeiro bloco de código cuja condição for verdadeira. Os demais são ignorados.**

---

### Comparando `if` + `elif` *vs* vários `if` isolados {.unnumbered}

É importante entender a diferença entre usar `elif` e vários `if` consecutivos.

```{python}
a = 1

if a == 1:
    print("Caiu no 1º if")
elif a >= 1:
    print("Caiu no elif")
else:
    print("Caiu no else")
```

Nesse exemplo, apenas o primeiro bloco (`if a == 1`) será executado.

Agora, veja o que acontece se usamos dois if separados:

```{python}
a = 1

if a == 1:
    print("Caiu no 1º if")

if a >= 1:
    print("Caiu no 2º if")
else:
    print("Caiu no else")
```

Aqui, ambos os blocos `if` serão avaliados independentemente. Isso pode ser útil em algumas situações, mas exige atenção!

---

### Outros Exemplos de Condicionais

```{python}
value = 2.35

# 1ª condição
if value <= 1:
  print("O valor é menor ou igual a 1")
  
  # 1ª condição (interna) dada que 1ª condição (externa) foi satisfeita
  if value < 0.5:
    print("E é menor que 0,5")
    
  # 2ª condição (interna) dada que 1ª condição (externa) foi satisfeita
  elif value == 0.5:
    print("O valor é igual a 0,5")
    
  # 3ª condição (interna) dada que 1ª condição (externa) foi satisfeita
  else:
    print("O valor é maior que 0,5")
    
# 2ª condição
elif value <= 2:
  print("O valor é menor ou igual a 2")
  
  # 1ª condição (interna) dada que 2ª condição (externa) foi satisfeita
  if value < 1.5:
    print("E é menor que 1,5")
    
  # 2ª condição (interna) dada que 2ª condição (externa) foi satisfeita
  elif value == 1.5:
    print("O valor é igual a 1,5")
    
  # 3ª condição (interna) dada que 2ª condição (externa) foi satisfeita
  else:
    print("O valor é maior que 1,5")
    
# 3ª condição
else:
  print("Sabe-se apenas que o valor é maior que 2")
  
  # 1ª condição (interna) dada que 3ª condição (externa) foi satisfeita
  if value <= 2.5:
    print("Porém está entre (2; 2,5]")
    
  # 2ª condição (interna) dada que 3ª condição (externa) foi satisfeita
  elif value <= 3:
    print("Porém está entre (2,5; 3]")
    
  # 3ª condição (interna) dada que 3ª condição (externa) foi satisfeita
  else:
    print("O valor é maior que 3")
```

```{python}

import random as rd

rd.seed(123456789)
review = [10 * rd.random() for _ in range(5)]
mean = sum(review) / len(review)
print(f"Média das Avaliações: {round(mean, 2)}")

# Em qual conceito está média estaria?

if (mean >= 0) and (mean < 5):
  print("O conceito do aluno foi INSUFICIENTE")
elif (mean >= 5) and (mean < 7):
  print("O conceito do aluno foi REGULAR")
elif (mean >= 7) and (mean < 9):
  print("O conceito do aluno foi BOM")
elif (mean >= 9) and (mean <= 10):
  print("O conceito do aluno foi EXCELENTE")
else:
  print("Média de Avaliações Inválida")
```

```{python}
print(f"Média das Avaliações: {round(mean, 2)}")

# Em qual conceito está média estaria?

if 0 <= mean < 5:
  print("O conceito do aluno foi INSUFICIENTE")
elif 5 <= mean < 7:
  print("O conceito do aluno foi REGULAR")
elif 7 <= mean < 9:
  print("O conceito do aluno foi BOM")
elif 9 <= mean < 10:
  print("O conceito do aluno foi EXCELENTE")
else:
  print("Média de Avaliações Inválida")
```

```{python}
age = 19
CNH = True

result = "Está apto a dirigir!" if age >= 18 and CNH != False else "Não está apto a dirigir!"
result
```

```{python}
numero = 2.2 # int(input("Digite um número: "))

if numero > 0:
    print(f"{numero} é positivo")
    if numero % 2 == 0:
        print(f"{numero} é um número par")
    else:
        print(f"{numero} é um número ímpar")
else:
    print(f"{numero} não é positivo")
```
```{python}
x = 4
y = 5

maior_valor = x if x > y else y
maior_valor
```

```{python}
letra = "A "

if letra == "B":
  print("letra é B")

else:
  if letra == "C":
    print("letra é C")
  
  else:
    if letra == "A":
      print("letra é A")
    
    else:
      print("a letra não é A, B e C")
```

```{python}
sol = True
chuva = False

if sol and not chuva:
    print("Dia perfeito para um passeio!")
elif sol and chuva:
    print("Tem sol e chuva? Casamento de viúva!")
else:
    print("Melhor ficar em casa.")
```

---

### Considerações

- **Lembre das @tbl-operLogic (operadores lógicos) e @tbl-conecLogic (conectores lógicos).**

---

## Estruturas de Repetição

As estruturas de repetição são usadas para executar um bloco de código várias vezes, de forma automática, até que uma condição seja satisfeita ou uma sequência de elementos seja percorrida.

Em Python, temos duas principais formas de repetição:

- `for`: Ideal quando sabemos o número de repetições ou estamos percorrendo uma estrutura (lista, string, dicionário, etc).

- `while`: Ideal quando não sabemos o número exato de repetições e precisamos que o código continue enquanto uma condição for verdadeira.

---

### Estrutura `for`

A estrutura `for` é uma das formas mais comuns de repetição em Python. Ela é ideal quando:

- Sabemos de antemão quantas vezes o código deve ser repetido; ou
- Queremos percorrer os elementos de uma sequência (como listas, strings, dicionários, etc.).

Vamos começar com o básico: o objeto `range()`.

```{python}
# Lembra do objeto range()?
range(3)
```

O comando acima não imprime os números, ele apenas cria um objeto que representa uma sequência de 0 até 2 (três elementos, começando do zero). Para visualizar os elementos, podemos convertê-lo em uma lista:

```{python}
list(range(3))
```

Agora vamos usar o `range()` dentro de um laço `for`:

```{python}
# Loop com range()
for i in range(3):
    print(i)
```
> Aqui, o loop `for` vai executar o bloco de código três vezes, e a variável `i` assume os valores 0, 1 e 2 a cada repetição.

Você também pode fazer a mesma coisa passando uma lista explicitamente:

```{python}
print(f"Lista exemplo para iteração: {list(range(3))}")

for i in list(range(3)):
    print(i)
```
> O resultado será o mesmo. Nesse caso, você está iterando diretamente sobre os elementos de uma lista.

---

#### Iterando em Strings

Strings são sequências de caracteres, e podemos percorrê-las com o `for`.

```{python}
texto = "Curso de Python para Análise de Dados."
for caractere in texto:
    print(caractere)
```
> A cada repetição, a variável `letra` recebe um caractere da string. Esse recurso é útil para manipulações de texto.

---

#### Interando em Listas

Suponha que você tenha uma lista com nomes de frutas, e deseja imprimir cada fruta em letras maiúsculas.

```{python}
# Lista de frutas
frutas = ["maçã", "banana", "laranja", "abacaxi", "uva"]

# Imprimindo cada fruta em caixa alta
for fruta in frutas:
    print(fruta.upper())
```
> O método `upper()` transforma a string para letras maiúsculas. A variável fruta assume o valor de cada elemento da lista a cada iteração.

Vamos ver outro exemplo: elevar números ao quadrado e ao cubo:

```{python}
# Criando a lista de números de 0 a 5
numbers = list(range(6))

# Iterando sobre a lista
for number in numbers:
    print(f"Número: {number}")
    print(f"Número ao quadrado: {number ** 2}")
    print(f"Número ao cubo: {number ** 3}\n")
```
> `number` assume os valores de 0 a 5 e cada iteração é mensurado o seu quadrado e o seu cubo.

---

#### Iterando em Dicionários

Dicionários são estruturas de dados compostas por pares `chave:valor`. Podemos iterar por eles usando o método `items()`, que retorna as chaves e valores simultaneamente:

```{python}
# Dicionário com traduções da palavra "gato"
translations = {"Português": "gato", "Inglês": "cat", "Francês": "chat"}

# Percorrendo as chaves e os valores
for idioma, palavra in translations.items():
    print(f"{idioma} -> {palavra}")
```
> A cada iteração, `idioma` recebe a chave e `palavra` recebe o valor correspondente.

Você também pode usar `zip()` para fazer a iteração:

```{python}
# Outra forma de iterar: combinando as chaves e os valores com zip()
for idioma, palavra in zip(translations.keys(), translations.values()):
    print(f"{idioma} -> {palavra}")
```
> O `zip()` combina os elementos das duas listas (chaves e valores) em pares.

**Iterando com `enumerate()`:** Às vezes, além de acessar o valor de uma lista ou dicionário, também queremos saber a posição (índice) do elemento. Para isso, usamos `enumerate()`.

Vamos aplicar isso a um dicionário um pouco mais complexo:

```{python}
# Dicionário com informações de pessoas
dados = {
    "Nome": ["Igor", "Allan", "Victória", "Izabella", "Fernando"],
    "Idade": [39, 17, 98, 45, 27],
    "Animal de Estimação": ["Gato", "Tigre", "Arara", "Javali", "Ratatouille"]
}

# Percorrendo os dados
for i, key in enumerate(dados.keys()):
    if i == 0:
        print("Informações Coletadas:")
    for id in dados[key]:
        if id == dados[key][0]:
            print(f"   {i + 1}. {key}:")
            print(f"      {id}")
        else:
            print(f"      {id}")
```
> Aqui temos dois níveis de repetição. O primeiro laço percorre cada "coluna" do dicionário, enquanto o segundo imprime os dados. O `enumerate()` é usado para acessar o índice `i` da chave atual, que nos ajuda a numerar facilitando a visualização de chave a chave.

Esse tipo de estrutura é útil para imprimir dados de maneira organizada, como se fosse uma tabela ou relatório.

---

#### Compreensão de Listas (List Comprehension)

Uma forma compacta e elegante de construir listas com base em laços `for` é a compreensão de listas.

A sintaxe básica é:

```python
[expressao for item in lista]
```

Isso pode ser lido como: *aplique a `expressao` a cada `item` da `lista`*.

Vejamos um exemplo simples.

```{python}
# Forma tradicional
quadrados = []
for num in range(1, 11):
    quadrados.append(num ** 2)

# Visualizar
print(quadrados)

# Forma com list comprehension
quadrados = [num ** 2 for num in range(1, 11)]

# Visualizar
print(quadrados)
```
> A cada iteração é calculado o quadrado do `num` que assume valores de 1 a 10.

---

##### Compreensão de Listas com Condição (`if`)

É possível aplicar condicionais em compreensão de listas. De forma geral, a seguinte sintaxe é seguida:

```python
[expression for item in list if condition]
```
Logo, a linha de código acima diz *aplique a `expression` para cada `item` da `list` dado que `condition` é verdadeira*.

Vejamos alguns exemplos:

```{python}
# Forma tradiconal
pares = []
for num in range(1, 21):
  if num % 2 == 0:
    pares.append(num)

# Visualizar  
print(pares)

# Forma com list comprehension
pares = [num for num in range(1, 21) if num % 2 == 0]

# Visualizar  
print(pares)
```
> Apenas os números pares serão incluídos na lista.

Também é possível combinar várias condições:

```{python}
# Forma tradiconal
multiplos = []
for num in range(100):
  if num % 2 == 0 and num % 5 == 0:
    multiplos.append(num)

# Visualizar  
print(multiplos)

# Forma com list comprehension
multiplos = [num for num in range(100) if num % 2 == 0 and num % 5 == 0]

# Visualizar  
print(multiplos)
```
> A lista conterá números múltiplos de 2 **e** de 5.

```{python}
# Forma tradiconal
multiplos = []
for num in range(100):
  if num % 2 == 0 and num % 5 == 0 and num % 6 == 0:
    multiplos.append(num)

# Visualizar  
print(multiplos)

# Forma com list comprehension
multiplos = [num for num in range(100) if num % 2 == 0 and num % 5 == 0 and num % 6 == 0]

# Visualizar  
print(multiplos)
```
> A lista conterá números múltiplos de 2, 5 **e** 6.

```{python}
# Forma tradiconal
multiplos = []
for num in range(100):
  if num % 2 == 0 and num % 5 == 0 or num % 6 == 0:
    multiplos.append(num)

# Visualizar  
print(multiplos)

# Forma com list comprehension
multiplos = [num for num in range(100) if num % 2 == 0 and num % 5 == 0 or num % 6 == 0]

# Visualizar  
print(multiplos)
```

> A lista conterá números múltiplos de 2 **e** de 5 **ou** de 6.

---

##### Compreensão de Listas com `if`  e `else`

A estrutura muda levemente:

```python
[expression_if if condition else expression_else for item in list]
```
Em outras palavras: *execute `expression_if` caso `condition` seja verdadeira e `expression_else` caso contrário para cada `item` da `list`*.

Vamos a um exemplo.

```{python}
# Forma tradiconal
sucess_number_div_5 = []
for number in range(26):
  if number % 5 == 0:
    sucess_number_div_5.append("sucess")
  else:
    sucess_number_div_5.append("failure")

# Visualizar  
print(sucess_number_div_5)

# Forma com list comprehension
sucess_number_div_5 = ["sucess" if number % 5 == 0 else "failure" for number in range(26)]

# Visualizar  
print(sucess_number_div_5)
```
> A expressão acima retorna uma lista com as palavras `"sucess"` ou `"failure"` dependendo do valor de cada número.

---

##### Múltiplas Compreensão de Listas

Aqui é exigida um pouco mais de atenção. Considere a matriz $$\mathbf{x} = \begin{bmatrix} 1 & 2 & 3 & 4 \\ 5 & 6 & 7 & 8 \\ 9 & 10 & 11 & 12 \end{bmatrix}$$ e $$\mathbf{x^{\intercal}} = \begin{bmatrix} 1 & 5 & 9 \\ 2 & 6 & 10 \\ 3 & 7 & 11 \\ 4 & 8 & 12 \end{bmatrix}.$$ Como fazer isso usando compreensão de listas?

```{python}
matrix = [
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9, 10, 11, 12]
]
```


Para facilitar o entendimento e melhorar a aprendizagem, vamos fazer usando estrutura `for` de forma simples.

```{python}
# Forma tradiconal
transposta = []
for column in range(len(matrix[0])):
  row = []
  
  for element in matrix:
    row.append(element[column])
    
  transposta.append(row)

# Visualizar  
print(transposta)
```

Entretanto, é possível otimizar o código usando compreensão de listas.

```{python}
# Forma com list comprehension
transposta = [[element[column] for element in matrix] for column in range(len(matrix[0]))]

# Visualizar  
print(transposta)
```

---

### Estrutura `while`

A estrutura de repetição `while` é usada quando **não sabemos com antecedência quantas vezes o bloco de código deve ser repetido**. A repetição acontece **enquanto uma condição lógica for verdadeira**. Assim que essa condição se torna falsa, o laço é encerrado automaticamente.

A estrutura geral é:

```python
while condição:
    # bloco de código
```

Isso significa que o código dentro do `while` será executado repetidamente **enquanto** a condição especificada for verdadeira. Por isso, é **muito importante** garantir que a condição eventualmente se torne falsa — do contrário, o programa pode entrar em um **loop infinito**.

---

#### Exemplos de Uso

##### Contador Simples

```{python}
contador = 1

while contador <= 5:
    print(f"Contador: {contador}")
    contador += 1
```

Esse é o uso mais básico de um `while`. A variável de controle é atualizada em cada repetição até que a condição se torne falsa.

---

##### Apenas Números Pares

```{python}
n = 1

while n <= 10:
    if n % 2 == 0:
        print(f"{n} é par")
    n += 1
```

Neste exemplo, o `if` dentro do `while` adiciona uma **condição extra**, filtrando apenas os números pares entre 1 e 10.

---

##### Exemplo com `input()`

```python
number = int(input("Digite um número positivo: "))

while number <= 0:
    print("O número fornecido não é positivo. Tente novamente!")
    number = int(input("Digite um número positivo: "))

print(f"Parabêns. O número fornecido é positivo!")
```

Esse exemplo usa `input()` para verificar se o valor digitado é positivo ou não.

---

##### Exemplo com string: invertendo uma palavra

```{python}
palavra = "Python"
reverso = ""
i = len(palavra) - 1

while i >= 0:
    reverso += palavra[i]
    i -= 1

print(f"A palavra '{palavra}' invertida é '{reverso}'.")
```

Aqui usamos `while` para percorrer uma string de trás para frente e gerar sua versão invertida.

---

##### Exemplo com lista: somando números até esvaziar a lista

```{python}
numeros = [10, 20, 30, 40, 50]
soma = 0

while numeros:
    valor = numeros.pop()  # remove o último elemento
    soma += valor

print(f"Soma dos valores: {soma}")
```

Esse exemplo mostra como o `while` pode operar **enquanto uma lista tiver elementos** — uma abordagem comum para **estrutura de pilha**.

---

##### Exemplo com múltiplas condições

```{python}
dados = [12, -3, 5, 0, -8, 19, -1, 0, 7]
i = 0

positivos = 0
negativos = 0
zeros = 0

while i < len(dados):
    if dados[i] > 0:
        positivos += 1
    elif dados[i] < 0:
        negativos += 1
    else:
        zeros += 1
    i += 1

print(f"Positivos: {positivos}, Negativos: {negativos}, Zeros: {zeros}")
```

Esse exemplo simula uma **classificação de dados** usando `while` com múltiplas condições `if-elif-else`.

---

### Comandos Chave

## Funções

:::: progress
:::: {.progress-bar style="width: 100%;"}
::::
::::