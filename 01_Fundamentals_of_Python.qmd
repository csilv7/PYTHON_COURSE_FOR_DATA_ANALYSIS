```{r include=FALSE, echo=FALSE}
library(reticulate)
use_python("C:/Users/user/anaconda3/python.exe", required = TRUE)
```

```{=html}
<style>
  body{text-align: justify}
</style>
```

:::: progress
:::: {.progress-bar style="width: 100%;"}
::::
::::

# Primeiros Passos

## Introdução ao Python

Neste primeiro capítulo, daremos os passos iniciais no mundo da programação com Python. Vamos entender o que é essa linguagem, por que ela se tornou tão popular (especialmente para análise de dados) e como preparar nosso ambiente para começar a codificar.

### O Que Torna Python Especial?

Python é frequentemente descrita como uma linguagem de programação **poderosa**, **versátil** e, acima de tudo, **legível**. Mas o que isso significa na prática?

1.  **Linguagem Interpretada:** Diferente de linguagens compiladas (como C++ ou Java), onde o código fonte é traduzido para código de máquina antes da execução, o código Python é executado linha por linha por um programa chamado **interpretador**. Isso facilita o desenvolvimento e o teste, pois você pode executar pequenos trechos de código rapidamente.
2.  **Alto Nível:** Python abstrai muitos detalhes complexos do hardware do computador (como gerenciamento de memória). Isso permite que você se concentre na lógica do problema que está tentando resolver, em vez de se preocupar com detalhes de baixo nível.
3.  **Tipagem Dinâmica:** Você não precisa declarar explicitamente o tipo de uma variável (inteiro, texto, etc.) antes de usá-la. O Python infere o tipo automaticamente durante a execução. Isso torna o código mais conciso, mas exige atenção para evitar erros relacionados a tipos inesperados.
4.  **Propósito Geral:** Python não se limita a uma única área. É usada em desenvolvimento web, automação de tarefas, inteligência artificial, computação científica e, claro, **análise e ciência de dados**.
5.  **Sintaxe Clara e Legível:** A sintaxe do Python foi projetada para ser próxima da linguagem humana, utilizando indentação (espaços no início da linha) para definir blocos de código, o que força a escrita de um código visualmente organizado.

Essas características, combinadas com um vasto ecossistema de bibliotecas (conjuntos de código pré-escrito para tarefas específicas), fazem do Python uma ferramenta excepcional para análise de dados, adotada por gigantes como Google, NASA, Facebook (Meta), Amazon e Spotify.

### Configurando o Ambiente: Anaconda e Jupyter Notebook

Para começar nossa jornada, precisamos instalar o Python e as ferramentas necessárias. A maneira mais recomendada para iniciantes em análise de dados é usar a **Distribuição Anaconda**.

**O que é Anaconda?** É um pacote que inclui:

*   O interpretador Python.
*   Um gerenciador de pacotes (bibliotecas) chamado `conda`.
*   Diversas bibliotecas científicas e de análise de dados pré-instaladas (como NumPy, Pandas, Matplotlib).
*   Ferramentas úteis, como o **Jupyter Notebook** e o **JupyterLab**.

**O que é Jupyter Notebook?** É uma aplicação web interativa que permite criar e compartilhar documentos (chamados *notebooks*) que contêm código executável (como Python), texto formatado (Markdown), equações, visualizações e muito mais. É um ambiente ideal para aprendizado, experimentação e apresentação de análises de dados.

**Passos para Instalação:**

1.  **Download:** Acesse o site oficial do Anaconda: [https://www.anaconda.com/download](https://www.anaconda.com/download)
2.  **Escolha seu Sistema Operacional:** Baixe o instalador apropriado para Windows, macOS ou Linux.
3.  **Instalação:** Execute o instalador e siga as instruções. Geralmente, as opções padrão são adequadas para iniciantes.
4.  **Vídeo de Apoio:** Se precisar de ajuda visual, este [tutorial de instalação no YouTube](https://youtu.be/_eK0z5QbpKA?si=iqLmmQcuDoQqZ-b) pode ser útil.

::: {.callout-tip title="Dúvidas na Instalação?"}
Se encontrar problemas, não hesite em procurar tutoriais mais específicos para sua versão do sistema operacional ou entrar em contato:

*   **Email do Instrutor:** breno.silva@icen.ufpa.br
:::

Após a instalação, você poderá iniciar o Jupyter Notebook (geralmente através do Anaconda Navigator ou pelo terminal/prompt de comando digitando `jupyter notebook`).

## Sintaxe Básica: A Gramática do Python

Toda linguagem tem suas regras. Em Python, a sintaxe define como escrevemos comandos válidos que o interpretador possa entender. Vamos começar com o básico.

### Exibindo Informações: A Função `print()`

A primeira função que a maioria dos programadores aprende é a `print()`. Sua finalidade é exibir informações (texto, números, resultados de cálculos) na tela (console ou saída do notebook).

O famoso "Hello, World!":

```python
print("Hello, World!")
```

**Como funciona?**

*   `print` é o nome da função.
*   Os parênteses `()` são usados para chamar a função e passar informações para ela.
*   O que está dentro dos parênteses é chamado de **argumento**. Neste caso, o argumento é o texto (string) `"Hello, World!"`.
*   Strings em Python são definidas usando aspas simples (`'...'`) ou duplas (`"..."`).

#### Erros Comuns com `print()`

É normal cometer erros ao aprender. Vejamos alguns deslizes comuns com `print()`:

1.  **Nome Incorreto (Case-Sensitive):** Python diferencia maiúsculas de minúsculas.

    ```python
    # Exemplo de Código Incorreto
    Print("Olá")
    ```
    *Erro Gerado:* `NameError: name 'Print' is not defined` (O Python não reconhece 'Print' com 'P' maiúsculo).

2.  **Faltando Aspas:** Textos (strings) precisam estar entre aspas.

    ```python
    # Exemplo de Código Incorreto
    print(Olá)
    ```
    *Erro Gerado:* `SyntaxError: invalid syntax` (O Python não entende 'Olá' como um comando ou variável válida sem aspas).

3.  **Aspas Incompletas:** Abrir aspas e não fechar (ou vice-versa).

    ```python
    # Exemplo de Código Incorreto
    # print("Olá)
    ```
    *Erro Gerado:* `SyntaxError: unterminated string literal` (A string não foi finalizada corretamente).

4.  **Misturar Tipos de Aspas:** Começar com simples e terminar com duplas (ou vice-versa).

    ```python
    # Exemplo de Código Incorreto
    # print('Olá")
    ```
    *Erro Gerado:* `SyntaxError: unterminated string literal`.

::: {.callout-important title="Atenção à Sintaxe!"}
Erros de sintaxe são como erros de gramática. O interpretador Python precisa que as regras sejam seguidas para entender suas instruções. Prestar atenção aos detalhes (maiúsculas/minúsculas, parênteses, aspas) é fundamental.
:::

**Usando Aspas Dentro de Strings:**

Se precisar incluir aspas no seu texto, alterne os tipos de aspas:

```python
print('Ele disse: "Python é incrível!"')
print("O livro se chama 'O Guia do Mochileiro das Galáxias'.")
```

**Quebras de Linha:**

Para inserir uma quebra de linha dentro de uma string, use o caractere especial `\n` (barra invertida seguida de 'n'):

```python
print("Linha 1\nLinha 2\nLinha 3")
```

### Operadores Matemáticos: Calculando com Python

Python pode ser usado como uma calculadora poderosa. Ele suporta os operadores matemáticos básicos e alguns mais avançados. Observe a @tbl-operMath.

```{r, echo=FALSE}
#| label: tbl-operMath
#| tbl-cap: "Operadores Matemáticos."

library(knitr)

# Dados da Tabela
tbl <- data.frame(
  Operador = c("`+`", "`-`", "`*`", "`/`", "`//`", "`%`", "`**`"),
  Desc = c("Adição", "Subtração", "Multiplicação", "Divisão (`float`)", "Divisão (`int`)",
           "Módulo (Resto)", "Exponenciação"),
  Ex = c("`5 + 3`", "`5 - 3`", "`5 * 3`", "`10 / 3`", "`10 // 3`", "`10 % 3`", "`2 ** 3`"),
  Result = c("`8`", "`2`", "`15`", "`3.3333`", "`3`", "`1`", "`8`")
)

# Gerando Tabela
kable(
  x = tbl,
  align = "c",
  col.names = c("Operador", "Descrição", "Exemplo", "Resultado")
)
```

**Exemplos:**

```{python}
# Adição e Subtração
print(10 + 5)  
print(10 - 5.5)

# Multiplicação e Divisão
print(4 * 7)
print(15 / 4)   # Divisão resulta em float

# Divisão Inteira (descarta a parte decimal)
print(15 // 4)  

# Módulo (resto da divisão inteira)
print(15 % 4)   # 15 dividido por 4 é 3, com resto 3

# Exponenciação (potência)
print(3 ** 4)   # 3 elevado à 4ª potência
```

::: {.callout-danger title="Divisão por Zero"}
Assim como na matemática, tentar dividir por zero em Python gera um erro:

```python
10 / 0
```
*Erro Gerado:* `ZeroDivisionError: division by zero`
:::

**Calculando Raiz Quadrada:**

Podemos usar exponenciação com expoente fracionário:

```{python}
print(81 ** 0.5) # Raiz quadrada de 81
```

No entanto, a forma mais comum e recomendada é usar a função `sqrt()` da biblioteca (módulo) `math`:

```{python}
import math # Importa a biblioteca math

print(math.sqrt(81))
```

::: {.callout-note title="Importando Módulos"}
O comando `import math` torna todas as funções e constantes definidas no módulo `math` disponíveis para uso no seu código. Veremos mais sobre módulos e bibliotecas posteriormente.
:::

### Expressões Numéricas e Precedência

Podemos combinar múltiplos operadores em uma única expressão:

```{python}
3 + 4 * 2 - 5 / 2 ** 2
```

Qual a ordem de execução? Python segue a ordem de precedência padrão da matemática, conhecida como **PEMDAS**:

1.  **P**arênteses `()` - Operações dentro de parênteses são executadas primeiro.
2.  **E**xponenciação `**`
3.  **M**ultiplicação `*`, **D**ivisão `/`, Divisão Inteira `//`, Módulo `%` (executados da esquerda para a direita se tiverem a mesma precedência).
4.  **A**dição `+`, **S**ubtração `-` (executados da esquerda para a direita se tiverem a mesma precedência).

No exemplo `3 + 4 * 2 - 5 / 2 ** 2`:

1.  `2 ** 2` é `4`
2.  `4 * 2` é `8`
3.  `5 / 4` é `1.25`
4.  `3 + 8` é `11`
5.  `11 - 1.25` é `9.75`

Use parênteses para controlar a ordem quando necessário:

```{python}
(3 + 4) * (2 - 5) / (2 ** 2)
# (7) * (-3) / (4) = -21 / 4 = -5.25
```

#### Uma Nota Sobre Números Decimais (Ponto Flutuante)

Você pode notar resultados ligeiramente inesperados ao trabalhar com números decimais (chamados *floats* em Python):

```{python}
print(0.1 + 0.2)
```

Por que `0.30000000000000004` e não `0.3`? A maioria dos computadores utiliza a representação binária (base 2) para armazenar números. O problema é que muitas frações decimais (base 10), como `0.1`, não podem ser representadas exatamente em binário. Isso ocorre porque a representação binária tem um número finito de dígitos, assim como ocorre na representação decimal. Por exemplo, ao representar $1/3$ em decimal, obtém-se uma repetição infinita: $0.3333 \ldots$ Da mesma forma, a conversão de `0.1` para binário gera uma fração periódica infinita.

Os computadores modernos seguem o padrão IEEE 754 para representar números de ponto flutuante. Esse padrão define como os números são armazenados na memória, incluindo a precisão. Em Python, os números de ponto flutuante geralmente utilizam precisão dupla do IEEE 754, que oferece 53 bits de precisão. Quando um número como 0.1 é digitado, o computador encontra a fração binária mais próxima possível dentro desse limite de precisão. O resultado é um valor muito próximo de 0.1, mas não exatamente igual.

::: {.callout-tip title="Lidando com Imprecisões de Float"}
Para a maioria das aplicações em análise de dados, essa pequena imprecisão não é um problema. Ao exibir resultados, você pode arredondar os números usando a função `round()`:

```{python}
print(round(0.1 + 0.2, 2)) # Arredonda para 2 casas decimais
```

Para cálculos financeiros ou científicos que exigem alta precisão, Python oferece módulos como `Decimal`.
:::

### Comparações e Operadores Lógicos

Frequentemente, precisamos comparar valores em nossos programas. Python oferece operadores de comparação que retornam um valor **booleano**: `True` (Verdadeiro) ou `False` (Falso).

```{r, echo=FALSE}
#| label: tbl-operComp
#| tbl-cap: "Operadores de Comparação."

library(knitr)

# Dados da Tabela
tbl <- data.frame(
  Operador = c("`<`", "`>`", "`<=`", "`>=`", "`==`", "`!=`"),
  Desc = c("Menor que", "Maior que", "Menor ou igual a", "Maior ou igual a", "Igual a", "Diferente de"),
  Ex = c("`5 < 10`", "`5 > 10`", "`10 <= 10`", "`10 >= 10`", "`5 == 5`", "`5 != 10`"),
  Result = c("`True`", "`False`", "`True`", "`True`", "`True`", "`True`")
)

# Gerando Tabela
kable(
  x = tbl,
  align = "c",
  col.names = c("Operador", "Descrição", "Exemplo", "Resultado")
)

```

**Exemplos:**

```{python}
# Idade Mínima igual a 18
# Idade do Usuário igual a 25

print("Usuário é maior de idade?", 25 >= 18)
print("As idades são iguais?", 25 >= 18)
print("As idades são diferentes?", 25 >= 18)
```

**Operadores Lógicos:**

Podemos combinar múltiplas comparações usando operadores lógicos:

```{r, echo=FALSE}
#| label: tbl-operLog
#| tbl-cap: "Operadores Lógicos."

library(knitr)

# Dados da Tabela
tbl <- data.frame(
  Operador = c("`and`", "`or`", "`not`"),
  Desc = c("**Ambas** as condições forem `True`",
           "**Pelo menos uma** das condições for `True`",
           "A condição seguinte for `False` (inverte o valor lógico)"),
  Ex = c("`(5 < 10) and (10 > 3)`", "`(5 > 10) or (10 == 10)`", "`not (5 == 10)`"),
  Result = c("`True`", "`True`", "`True`")
)

# Gerando Tabela
kable(
  x = tbl,
  align = "c",
  col.names = c("Operador", "Resultado é `True` se", "Exemplo", "Resultado")
)
```


**Exemplos:**

```{python}
# Tem Ingresso igual a True
# É maior de idade igual a False

# Pode entrar na festa? (Precisa ter ingresso E ser maior de idade)
print("Pode entrar na festa?", True and False)

# Pode receber desconto? (Precisa ter ingresso OU ser maior de idade - exemplo hipotético)
print("Pode receber desconto?", True or False)

# Não tem ingresso?
print("Não tem ingresso?", not True)
```

```{python}
print((1 and 4) < 3)
print((1 or 4) < 3)
print((1 and 2 and 2.99) < 3)
print((1 or 2 or 2.99) > 3)
```

```{python}
print((5 >= 4.99) and (10 <= 10.01))
print((5 >= 4.99) and (10 == 10.01))
```

```{python}
print((5 >= 4.99) or (10 <= 10.01))
print((5 >= 4.99) or (10 == 10.01))
```

```{python}
print(1 == 1)
print(not 1 == 1)
print(not not 1 == 1)
print(not not not 1 == 1)
```

**Precedência dos Operadores Lógicos:**

Assim como os operadores matemáticos, os lógicos também têm uma ordem de avaliação:

1.  `not` é avaliado primeiro.
2.  `and` é avaliado em seguida.
3.  `or` é avaliado por último.

Exemplo:

```{python}
print(not False and True or False)
# 1. not False -> True
# 2. True and True -> True
# 3. True or False -> True
```

Use parênteses `()` para garantir a ordem desejada quando a expressão for complexa.

### Variáveis: Armazenando Informações

Uma **variável** funciona como um rótulo ou um nome que damos a um local na memória do computador onde um valor (um objeto) está armazenado. Isso nos permite referenciar e reutilizar valores facilmente.

O processo de criar uma variável e associar um valor a ela é chamado de **atribuição**, e usamos o sinal de igual (`=`) para isso.

```{python}
# Atribuição
quantidade_alunos = 19
preco_produto = 34.99
mensagem_boas_vindas = "Olá, estudante!"
curso_ativo = True

# Usando as variáveis
print(quantidade_alunos)
print(mensagem_boas_vindas)
```

#### Regras e Convenções para Nomes de Variáveis

Escolher nomes significativos torna o código muito mais fácil de entender.

*   **Regras (Obrigatórias):**
    *   Nomes devem começar com uma letra (a-z, A-Z) ou underscore (`_`).
    *   O restante do nome pode conter letras, números (0-9) e underscores.
    *   Nomes são *case-sensitive* (`idade` é diferente de `Idade`).
    *   Não podem ser iguais a **palavras-chave** reservadas do Python (como `if`, `else`, `for`, `while`, `def`, `class`, `import`, `True`, `False`, `None`, etc.).
*   **Convenções (Boas Práticas - PEP 8):**
    *   Use nomes em minúsculas.
    *   Separe palavras com underscores (estilo `snake_case`). Ex: `taxa_juros`, `nome_cliente`.
    *   Escolha nomes descritivos que indiquem o propósito da variável.

*   **Exemplos Válidos:** `idade`, `nome_completo`, `total_vendas`, `_variavel_privada` (convenção)

*   **Exemplos Inválidos:**

    ```python
    # Errado: começa com número
    1_lugar = "Ouro"
    
    # Errado: contém caractere especial (@)
    email@cliente = "teste@exemplo.com"
    
    # Errado: usa palavra-chave (def)
    def = "definição"
    ```

    Tentar usar um nome inválido ou uma palavra-chave resultará em `SyntaxError`.
    Tentar usar uma variável que não foi definida (atribuída) ainda resultará em `NameError`.

#### Atribuição com Expressões e Atualização

Podemos atribuir o resultado de uma expressão a uma variável:

```{python}
preco_unitario = 50
quantidade = 5
desconto = 0.10

valor_bruto = preco_unitario * quantidade
valor_desconto = valor_bruto * desconto
valor_final = valor_bruto - valor_desconto

print("Valor final:", valor_final)
```

Para atualizar o valor de uma variável existente, podemos usar a própria variável na expressão à direita do `=`:

```{python}
contador = 0
print("Contador inicial:", contador)

contador = contador + 1 # Incrementa o valor
print("Contador após incremento:", contador)
```

Python oferece **operadores de atribuição compostos** como atalhos:

*   `+=` (Adição): `x += 1` é o mesmo que `x = x + 1`
*   `-=` (Subtração): `x -= 5` é o mesmo que `x = x - 5`
*   `*=` (Multiplicação): `x *= 2` é o mesmo que `x = x * 2`
*   `/=` (Divisão): `x /= 4` é o mesmo que `x = x / 4`
*   `//=` , `%=` , `**=` (análogos para divisão inteira, módulo e exponenciação)

```{python}
num = 10
num += 3  # num agora é 13
print(num)

num *= 2  # num agora é 26
print(num)
```

#### Atribuição Múltipla

Python permite atribuir valores a múltiplas variáveis na mesma linha:

```{python}
x, y, z = 10, 20, "teste"
print(x)
print(y)
print(z)
```

Não parece algo tão interessante, não é? Vamos a um exemplo. Imagine um problema que envolve duas variáveis `a` e `b`. O Python permite a **atribuição múltipla**, o que pode ser útil para trocar valores entre variáveis de forma eficiente.

```{python}
a, b = 1, 200
print(a, b)  # Saída: 1 200
```

Agora, pense como poderiamos trocar os valores dessas variáveis. Pensou? Em algum momento deve ter passado pela sua cabeça a seguinte lógica:

```{python}
a = b # Perde-se o valor original de a (1)
print(a)


b = a # Como perdeu-se a, `b vai continuar com seu valor original (200)
print(b)
```

Em outras linguagens, para trocar valores entre duas variáveis, seria necessário usar uma variável auxiliar:

```{python}
a, b = 1, 200
print(a, b)  # Saída: 1 200

aux = a
a = b
b = aux
print(a, b)  # Agora a = 200 e b = 1
```

No entanto, em Python, a troca pode ser feita de forma mais elegante usando atribuição múltipla:

```{python}
a, b = 1, 200
print(a, b)  # Saída: 1 200

a, b = b, a
print(a, b)  # Agora a = 200 e b = 1
```

Note que essa abordagem pode ser expandida para múltiplas variáveis.

### Tipos de Objetos Fundamentais

Já vimos alguns tipos de dados (valores) que podemos armazenar em variáveis. Cada valor em Python é um **objeto**, e cada objeto pertence a um **tipo** (ou **classe**). O tipo define quais operações podem ser realizadas com aquele objeto.

Podemos verificar o tipo de um objeto usando a função `type()`:

```{python}
numero_inteiro = 100
numero_decimal = 3.14159
texto = "Análise de Dados"
logico = False

print(type(numero_inteiro))
print(type(numero_decimal))
print(type(texto))
print(type(logico))
```

**Principais Tipos Primitivos:**

*   **`int` (Inteiro):** Números inteiros, positivos ou negativos, sem parte decimal (ex: `-10`, `0`, `42`).
*   **`float` (Ponto Flutuante):** Números reais, que possuem uma parte decimal (ex: `-3.14`, `0.0`, `99.99`).
*   **`str` (String):** Sequências de caracteres (texto), delimitadas por aspas simples ou duplas (ex: `'Python'`, `"Olá, mundo!"`).
*   **`bool` (Booleano):** Representa valores lógicos de Verdadeiro (`True`) ou Falso (`False`).
*   **`NoneType` (None):** Um tipo especial que tem apenas um valor: `None`. Usado para representar a ausência de valor.

Além desses, Python possui tipos de dados mais complexos para agrupar informações, que veremos em detalhes mais adiante:

*   **`list` (Lista):** Coleção ordenada e *mutável* de itens.
*   **`tuple` (Tupla):** Coleção ordenada e *imutável* de itens.
*   **`dict` (Dicionário):** Coleção não ordenada de pares chave-valor.
*   **`set` (Conjunto):** Coleção não ordenada de itens únicos.

### Métodos e Atributos

Em Python, os conceitos de métodos e atributos são fundamentais na programação orientada a objetos (POO). Eles definem as características e comportamentos dos objetos.

#### Métodos

- **Definição:**
    * Métodos são funções definidas dentro de um objeto. Eles definem os comportamentos ou ações que um objeto pode realizar.
    * Pense neles como as "ações" que um objeto pode executar.
- **Exemplo:**
    * Em um objeto `carro`, métodos poderiam ser `ligar()`, `acelerar()` e `frear()`.
- **Acesso:**
    * Chamamos métodos usando a sintaxe `objeto.método()`.

#### Atributos

- **Definição:**
    * Atributos são variáveis que armazenam dados dentro de um objeto. Eles representam as características ou propriedades de um objeto.
    * Pense neles como as "informações" (sobre o objeto por isso características) que um objeto carrega consigo.
- **Exemplo:**
    * Em um objeto `carro`, atributos poderiam ser `cor`, `marca`, `modelo` e `ano`.
- **Acesso:**
    * Acessamos atributos usando a sintaxe `objeto.atributo`.

#### Relação entre Métodos e Atributos

Métodos frequentemente manipulam os atributos de um objeto. Por exemplo, um método `acelerar()` pode modificar o atributo `velocidade` de um objeto `carro`.

**Em resumo:**

* Atributos são as características que um objeto possui.
* Métodos são as ações que um objeto pode realizar.

Essa distinção permite criar objetos que representam entidades do mundo real com suas próprias características e comportamentos.

### Obtendo Ajuda e Explorando

Python oferece ferramentas para ajudar você a aprender e explorar:

*   **`help()`:** Fornece documentação sobre funções, módulos ou tipos.

    ```python
    # help(print) # Descomente para ver a ajuda da função print
    # help(str)   # Descomente para ver a ajuda sobre o tipo string
    # help(math)  # Descomente para ver a ajuda sobre o módulo math (precisa importar antes)
    ```
*   **`dir()`:** Lista os nomes (atributos e métodos) definidos por um objeto ou módulo.

    ```python
    # print(dir(str)) # Lista métodos e atributos de strings
    # print(dir(math)) # Lista funções e constantes do módulo math
    ```
*   **`type()`:** Como já vimos, retorna o tipo de um objeto.

No ambiente Jupyter Notebook, você também pode usar:

*   `?` após um nome de função/objeto para ver sua documentação (ex: `print?` ou `frase.upper?`).
*   `??` após um nome de função/objeto para tentar ver o código fonte (se disponível).
*   Completar com `Tab`: Digite o início de um nome de variável ou método e pressione `Tab` para ver sugestões.

---

Este capítulo cobriu os fundamentos essenciais para começar a programar em Python. Nos próximos capítulos, construiremos sobre essa base para explorar estruturas de dados mais complexas e as ferramentas específicas para análise de dados.

:::: progress
:::: {.progress-bar style="width: 100%;"}
::::
::::